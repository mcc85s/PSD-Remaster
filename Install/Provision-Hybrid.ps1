#_____________________________________________________________________________________________________________________________________________________
#//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//  [ Secure Digits Plus LLC | Hybrid | Desired State Controller ]  \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯     __________________________________________________________     ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯ -=-=-=-=-=-=-=[ Dynamically Engineered Digital Security ]-=-=-=-=-=-=--=-= ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯                                           ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   Application Development | Virtualization | Network and Hardware Magistration   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   https://www.securedigitsplus.com | Server-Client | Seedling-Spawning Script    \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\___¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ___//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   [ Provisional Author : Michael C Cook Sr. | "The Buck Stops Here" ]    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//   ____    ____    ____    ____    ____    ____    ____    ____    ____   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\
#\\  [ Install-Hybrid ] @: Installs the base folder and application prerequisites for initializing a Hybrid Desired State Controller Server  //  \\__//
#//__________________________________________________________________________________________________________________________________________\\__//  \\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#       Declare Namespaces    ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#                                 ¯¯¯¯    ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Using Namespace System.Security.Principal #¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
# ____                                           //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#//  \\                                          \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\__//  \\
    Function Elevate-Script # If the user is an administrator, and the window is not, this will elevate the window. Non-Admins get booted here.  \\__//
    { #__________________________________________________________________________________________________________________________________________//  \\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        ( GWMI Win32_ComputerSystem ) | % { If ( $_.PartOfDomain -eq $True ) { $DC = 1 } Else { $DC = 0 } $Gate = 0 ; $Key = 0 }     #\__//¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
        If ( $DC = 1 ) { IPMO ActiveDirectory ;                                                                                          #/¯¯\\__//¯¯\\
                         $I = @( Get-ADPrincipalGroupMembership -Identity $Env:Username | % { $_.Name -like "*Admin*" } )                #\__//¯¯\\__//
                         If ( $I -contains $True ) { $Gate = 1 } }                                                                       #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
        If ( $DC = 0 ) { $I = ( [ WindowsPrincipal ] [ WindowsIdentity ]::GetCurrent() ).IsInRole( "Administrator" )                     #/¯¯\\__//¯¯\\
                         If ( $I -eq $True )       { $Gate = 1 } Else {  $Key = 1 } }                                                    #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        If ( ( $Key = 1 ) -and ( [ Int ] ( gcim Win32_OperatingSystem ).BuildNumber -ge 6000 ) )                                         #\__//¯¯\\__//
        {                                                                                                                                #/¯¯\\__//¯¯\\
            Echo "Attempting [~] Script Elevation" ;                                                                                     #\__//¯¯\\__//
            $MyInvocation | % { SAPS -FilePath PowerShell.exe -Verb Runas -Args "-File $( $_.MyCommand.Path ) $( $_.UnboundArguments )" }#/¯¯\\__//¯¯\\
                         If ( $? -eq $True ) { $Gate = 1 } Else { $Gate = 0 } }                                                          #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        If ( $Gate = 1 ) { Echo "Access [+] Granted" ; Set-ExecutionPolicy Bypass -Scope CurrentUser -Force -VB }                        #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        Else { "Access [!] Denied" ; Sleep -S 2 ; Read-Host "Press Enter to Exit" ; Exit } }                                             #\__//¯¯\\__//
# ____                                                                                                                        ___________#/¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Wrap-Action # Ties this commandlet into Write-Output for styling strings    \\__//  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//
    { #__________________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        [ CmdletBinding () ] Param (                                                                                                 #\__//¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ][ String ] $Type ,                                     #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [ Parameter ( Position = 1 , Mandatory , ValueFromPipeline = $True ) ][ String ] $Info )                                     #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            $fs = " // " ; $bs = " \\ " ; $x = " " * ( 25 - $Type.Length ) ; $y = " " * ( 80 - $Info.Length )                            #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            Echo @( "" ; ( $fs + ( "¯-" * 54 ) + $bs ) ;                                                                                 #/¯¯\\__//¯¯\\
            "$( $bs + $x + $Type ) : $( $Info + $y + $fs )" ;                                                                            #\__//¯¯\\__//
            ( $fs + ( "-_" * 54 ) + $bs ) ; "" ) }                                                                                       #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
# ____                                                                                                                        ___________#/¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Wrap-Array # Ties this commandlet into Write-Output for styling a string array  //  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//
    { #______________________________________________________________________________________\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        [ CmdletBinding () ] Param (                                                                                                 #\__//¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ] [ Array ] $Block )                                    #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
                $fs = " // " ; $bs = " \\ "                                                                                              #/¯¯\\__//¯¯\\
                Echo @( " " * 112 ; $fs + "=-" * 54 + $bs ; $bs + "-=" * 54 + $fs ) ;                                                    #\__//¯¯\\__//
                Echo $Block ; Echo @( $bs + "=-" * 54 + $fs ; $fs + "-=" * 54 + $bs ; " " * 112 ) }                                      #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
# ____                                                                                                                        ___________#/¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Wrap-Section   #//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    { #__________________//¯¯\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        [ CmdLetBinding () ] Param (                                                                                                 #\__//¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ] [ String ] $Section )                                  #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            $z = $Section ; $x = " " * 10 ; $y = " " * ( 94 - $z.Length ) ; Wrap-In ; Echo "$( $fs + $x + $z + $y + $bs )" ; Wrap-In }   #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
# ____                                                                                                                        ___________#/¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Wrap-ItemIn    #//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    { #__________________//¯¯\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        [ CmdLetBinding () ] Param (                                                                                                 #\__//¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ] [ String ] $Type ,                                    #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [ Parameter ( Position = 1 , Mandatory , ValueFromPipeline = $True ) ] [ String ] $Info )                                    #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            $x = " " * ( 23 - $Type.Length ) ; $y = " " * ( 78 - $Info.Length ) ; Echo "$( $bs + $x + $Type ) : $( $Info + $y + $fs )" } #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
# ____                                                                                                                        ___________#/¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Wrap-ItemOut   #//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    { #__________________//¯¯\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        [ CmdLetBinding () ] Param (                                                                                                 #\__//¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ] [ String ] $Type ,                                    #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            [ Parameter ( Position = 1 , Mandatory , ValueFromPipeline = $True ) ][ String ] $Info )                                     #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
            $x = " " * ( 23 - $Type.Length ) ; $y = " " * ( 78 - $Info.Length ) ; Echo "$( $fs + $x + $Type ) : $( $Info + $y + $bs )" } #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
# ____                                                                                                                        ___________#/¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Display-TrueColors # Draws this static string array on the screen ( Will replace with Math at some point )  \\  //¯¯\\__//¯¯\\__//¯¯\\__//
    { #__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                        #\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
        Wrap-Array -Block @(                                                                                                 #\__//¯¯\\__//¯¯\\__//¯¯\\
        " //                                                                                                              \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // -=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_ \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\                                     ][                                               //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         //   *     *     *     *     *     *   ][ -_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=- \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\      *     *     *     *     *      ][                                               //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         //   *     *     *     *     *     *   ][ =-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-= \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\      *     *     *     *     *      ][    Dynamically Engineered Digital Security    //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         //   *     *     *     *     *     *   ][ -=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_- \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\      *     *     *     *     *      ][                                               //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         //   *     *     *     *     *     *   ][ _-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_ \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\      *     *     *     *     *      ][    Application Development - Virtualization   //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         //   *     *     *     *     *     *   ][ -_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=- \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\      *     *     *     *     *      ][        Network & Hardware Magistration        //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         //   *     *     *     *     *     *   ][ =-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-= \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\                                     ][                                               //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // -_-=-_-=_-=-_-=-_-=-_-=-_-=-_-=_-=-_][ -=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_- \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\                                                                                      //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // -=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_[=]\_/[=]\_/[=]\_/[=]=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_ \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\                                 | |               | |                                //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // _-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-[=]- H Y B R I D -[=]-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=- \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\                                 | |  ¯¯¯¯¯¯¯¯¯¯¯  | |                                //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // -_-=-_-=-_-=-_-=-[=]\_/[=]\_/[=]|=|-=-=- B Y -=-=-|=|[=]\_/[=]\_/[=]-_-=-_-=-_-=-_-= \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\                  | |                    ¯¯¯¯¯                    | |                 //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // =-_-=-_-=-_-=-_-=[-] S E C U R E - D I G I T S - P L U S - L L C [-]=-_-=-_-=-_-=-_- \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\                   \  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  /                  //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // -=-_-=-_-=[=]\_/[=]\_/[=]\_/[=]\_/[=]\__/[=]\__/[=]\_/[=]\_/[=]\_/[=]\_/[=]_-=-_-=-_ \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\           [=]                                                           [=]          //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // _-=-_-=-_-[=]- 0 7 / 2 8 / 2 0 1 9  |  M I C H A E L  C  C O O K  S R  -[=]-_-=-_-=- \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //         \\           [=]  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  [=]          //           \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\         // _-=-_-=-_-[=]-=-_-=-_-=_-=-_-=-_-=-_-=-_-=-_-=_-=-_-=-_-=-_-=-_-=-_-=_-=[=]=-_-=-_-= \\           // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " //                                      __________________________________                                      \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\                                      [ A heightened sense of security ]                                      // " ; #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//¯¯\\
        " //                                      ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯                                      \\ " ) ; Sleep -S 2 } #\\__//
# ____                                                                                                                        ___________________//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Display-Foot # Same as the above, just using this string array below at the end of the script   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    { #______________________________________________________________________________________________________\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                        #\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
        Wrap-Array -Block @(                                                                                                 #\__//¯¯\\__//¯¯\\__//¯¯\\
        " // /¯¯\\__//¯¯\\__//¯¯\\    __________________________________________________________    //¯¯\\__//¯¯\\__//¯¯\ \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\ \__//¯¯\\__//¯¯\\__//    Secure Digits Plus LLC | Hybrid | Desired State Controller    \\__//¯¯\\__//¯¯\\__/ // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " // /¯¯\\__//¯¯\\__//¯¯      ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯      ¯¯\\__//¯¯\\__//¯¯\ \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\ \__//¯¯\\__//¯¯  -=-=-=-=-=-=-=[ Dynamically Engineered Digital Security ]-=-=-=-=-=-=--=-=  ¯¯\\__//¯¯\\__/ // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " // /¯¯\\__//¯¯\\    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯                                           ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    //¯¯\\__//¯¯\ \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\ \__//¯¯\\__//   Application Development | Virtualization | Network and Hardware Magistration   \\__//¯¯\\__/ // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " // /¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\ \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\ \__//¯¯\\__//   https://www.securedigitsplus.com | Server-Client | Seedling-Spawning Script    \\__//¯¯\\__/ // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " // /¯¯\\__//¯¯\\__ ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    //¯¯\\__//¯¯\ \\ " ; #\__//¯¯\\__//¯¯\\__//
        " \\ \__//¯¯\\__//¯¯\\__         You've just deployed a heightened sense of security          __//¯¯\\__//¯¯\\__/ // " ; #/¯¯\\__//¯¯\\__//¯¯\\
        " // /¯¯\\__//¯¯\\__//¯¯\\__________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\ \\ " ; #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//
        " \\ \__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__/ // " ) ; Sleep -S 2 } #//¯¯\\
                                                                                                                                  #______________\\__//
# ____                                                                                                                        ___//¯¯\\__//¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Convert-XAMLToWindow # Overloads a block of XAML strings to convert into interactive content dynamically    \\__//¯¯\\__//¯¯\\__//  \\__//
    { #\\________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__// 
        Param ( [ Parameter ( Mandatory ) ] [ String ]                    $XAML ,                                            #\__//¯¯\\__//¯¯\\__//¯¯\\
                                            [ String [] ] $NamedElement = $Null ,                                                #\__//¯¯\\__//¯¯\\__//
                                            [ Switch ]                $PassThru )                                                #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        @( "Framework" , "Core" | % { "Presentation$_" } ) + "WindowsBase" | % { Add-Type -AssemblyName $_ }                     #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $Reader       = [ XML.XMLReader ]::Create([ IO.StringReader ] $XAML )                                                    #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $Output       = [ Windows.Markup.XAMLReader ]::Load( $Reader )                                                           #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $NamedElement | % { $Output | Add-Member -MemberType NoteProperty -Name $_ -Value $Output.FindName( $_ ) -Force }        #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        If ( $PassThru )  { $Output }                                                                                            #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        Else { $Null = $GUI.Dispatcher.InvokeAsync{ $Output = $GUI.ShowDialog() ;                                                #/¯¯\\__//¯¯\\__//¯¯\\
        SV -Name Output -Value $Output -Scope 1 }.Wait() ; $Output } }                                                           #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Show-WPFWindow # Displays the previously overloaded XAML string \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
        Param ( [ Parameter ( Mandatory ) ] [ Windows.Window ] $GUI )                                                    #\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                             #\__//¯¯\\__//¯¯\\__//¯¯\\
        $Output = $Null ; $Null = $GUI.Dispatcher.InvokeAsync{ $Output = $GUI.ShowDialog()                                       #\__//¯¯\\__//¯¯\\__//
                                  SV -Name Output -Value $Output -Scope 1 }.Wait() ; $Output }                                       #\__//¯¯\\__//¯¯\\
# ____                                                                            ___________________________________________________//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Provision-Dependency # Downloads dependency programs & files    \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\  
       [ CmdLetBinding () ] Param ( 

            [ Parameter ( Position =  0 , ValueFromPipeline = $True ) ][ String ]     $ID , 

            [ Parameter ( Position =  1 , ValueFromPipeline = $True ) ][ String ]   $Path , 

            [ Parameter ( Position =  2 , ValueFromPipeline = $True ) ][ String ]   $File , 

            [ Parameter ( Position =  3 , ValueFromPipeline = $True ) ][ String ]    $URL , 

            [ Parameter ( Position =  4 , ValueFromPipeline = $True ) ][ String ]   $Args ) 

        If ( ( Test-Path $Path ) -ne $True ) 
        { 
            NI $Path -ItemType Directory -Value $Path 
            Wrap-Action -Type "Created" -Info "[+] Directory @: $Path" } 

        Start-BitsTransfer -Source $URL -Destination "$Path\$File" 

        Wrap-Action -Type "Installing" -Info $ID 
        Wrap-Action -Type "Processing" -Info "This could take a while." 

        $Dependency = SAPS -FilePath $File -Args $Args -WorkingDirectory $Path -PassThru 

        For ( $j = 0 ; $j -le 100 ; $j = ( $j + 1 ) % 100 ) 

        {   Write-Progress -Activity " [ Installing ] $ID" -PercentComplete $j -Status "$( $j )% Complete" 
            Sleep -M 250 

            If ( $Dependency.HasExited ) { Write-Progress -Activity "[ Installed ]" -Completed ; Return } } } 

# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Export-Ini # Extensively modified version found on TechNet           ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\  
        [ CmdLetBinding () ] Param ( 

            [ Parameter ( Mandatory = $True , Position = 0 ) ][ Alias ( "P" )]
            [ String ]        $Path , 

            [ ValidateNotNullOrEmpty () ][ ValidatePattern ( '^([a-zA-Z]\:)?.+\.ini$' ) ] 
            [ Parameter ( Mandatory = $True , Position = 1 ) ][ Alias ( "N" )]
            [ String ]        $Name ,

            [ ValidateNotNullOrEmpty () ]
            [ Parameter ( Mandatory = $True , Position = 2 , ValueFromPipeline = $True ) ][ Alias ( "V" )]
            [ Hashtable ]    $Value , 

            [ ValidateSet ( "Unicode" , "UTF7" , "UTF8" , "UTF32" , "ASCII" , "BigEndianUnicode" , "Default" , "OEM" ) ] 
            [ Parameter ( Mandatory = $True , Position = 3 ) ]
            [ String ]    $Encoding = "Unicode" ,

            [ Switch ]       $Force , 
            [ Switch ]      $Append , 
            [ Switch ]   $UTF8NoBOM ) 

        Begin
        {
            ( $P , $E , $F , $O , $HT ) = ( $Path , $Encoding , "$Path\$Name" , $Value , "Hashtable" )

            If (  ! ( $O ) )           { Wrap-Action "Exception" "[!] Value is Null" ; Break }

            If (  ! ( Test-Path $P ) ) { Wrap-Action "Exception" "[!] Invalid Path" ; Break }

            If ( ( Test-Path $F ) -and ( ! $Force ) )
            { 
                If ( $Append ) { $OF = @( GC $F ) }

                If ( ! $Append )

                { Wrap-Action "Exception" "[!] File exists @: Use -Force or -Append" ; Break }
            }
            Else { $OF = @( ) }
        }
        Process
        {
            Wrap-Action "Processing" "[~] Output"
            ForEach ( $i in $O.Keys )
            {
                If ( $( $O[$i].GetType().Name ) -ne $HT ) { $OF += "$i=$( $O[$i] )" } Else { $OF += "[$i]" }

                ForEach ( $j in $( $O[$i].Keys | Sort ) ) 
                {                                                                                          
                    If ( $j -Match "^Comment[\d]+" ) { $OF += "$( $O[$i][$j] )" }
                    Else { $OF += "$j=$( $O[$i][$j] )" }
                }
                SC -Path $F -Value @( $OF ) -Encoding $E
            }
            GI $F
            Wrap-Action "Completed" "[+] File Exported Successfully"
            Write-Host -F Cyan "$( $MyInvocation.MyCommand.Name ): $F"
        }

        End
        {
            If ( $UTF8NoBom ) 
            { [ System.IO.File ]::WriteAllLines( ( $F ), ( GC $F ) , ( New-Object System.Text.UTF8Encoding $False ) ) }
        }
    }

# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Test-Credential # Tests an input credential for AD authentication    ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        [ CmdLetBinding () ][ OutputType ( [ String ] ) ] Param ( 
        
            [ Parameter ( ValueFromPipeLine = $True , ValueFromPipelineByPropertyName = $True ) ]
        
                [ Alias ( 'PSCredential' ) ] [ ValidateNotNull () ][ System.Management.Automation.PSCredential ]
        
                [ System.Management.Automation.Credential () ] $Credentials )

        ( $Domain , $Root , $Username , $Password ) = @( 0..3 | % { $Null } )
     
        If ( $Credentials -eq $null ) {   

                Try   { $Credentials = Get-Credential "domain\$env:username" -EA 4 }
                Catch { $ErrorMsg    = $_.Exception.Message
                        Echo "Failure [!] Account Validation" 
                        Read-Host "Press Enter to Exit"
                        Exit } 
        }

        Try       { $Domain   = New-Object System.DirectoryServices.DirectoryEntry(
                                      "LDAP://$( ( [ ADSI ]'').distinguishedName )" , 
                                                       "$( $Credentials.Username )" , 
                                "$( $Credentials.GetNetworkCredential().Password )" ) }

        Catch     { $_.Exception.Message ; Continue } 

        If ( ! $Domain ) {   Echo "Exception [!] Domain does not exist"
                             Echo "Install [!] Active Directory Domain Services"
                             Read-Host "Press Enter to Exit" ; Exit 
        }

        Else {  If ( $Domain.Name -ne $Null ) { Return "Authenticated" ; Elevate-Script }
                Else { Echo "Authentication [!] Failure" ; Sleep -S 2 } 
        } 
    }
    
# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Add-ACL # Changes permissions of application pool/VHost              ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
       [ CmdletBinding () ] Param ( 

            [ String ] $Path , 

                [ System.Security.AccessControl.FileSystemAccessRule ] $AceObject ) 

            $OBJACL =  Get-ACL -Path $SiteRoot ; $OBJACL.AddAccessRule( $AceObject ) ; Set-ACL -Path $Path -AclObject $OBJACL }

# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function New-ACLObject # Generates an ACL and edits permissions               ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
        [ CmdletBinding () ] Param ( 

            [ String ] $SamAccountName , 

                [ System.Security.AccessControl.FileSystemRights  ]               $Permission , 
                [ System.Security.AccessControl.AccessControlType ]  $AccessControl = 'Allow' , 
                [ System.Security.AccessControl.InheritanceFlags  ]    $Inheritance =  'None' , 
                [ System.Security.AccessControl.PropagationFlags  ]    $Propagation =  'None' ) 

            New-Object -TypeName System.Security.AccessControl.FileSystemAccessRule( 

                $SamAccountName , $Permission , $Inheritance , $Propagation , $AccessControl ) } 

# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Get-WIMName # Retrieves the name of a given Windows Image File       ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        [ CmdLetBinding () ] Param ( 

            [ Parameter ( Position = 0 , ValueFromPipeline = $True ) ][ String ]    $IP , 
            [ Parameter ( Position = 1 , ValueFromPipeline = $True ) ][ String ]    $ID ) 

        ( Get-WindowsImage -ImagePath $IP ).ImageName } 
# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Get-WIMBuild  # Retrieves the build version number from said WIM     ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        [ CmdLetBinding () ] Param ( 

            [ Parameter ( Position = 0 , ValueFromPipeline = $True ) ][ String ]    $IP , 
            [ Parameter ( Position = 1 , ValueFromPipeline = $True ) ][ String ]    $ID ) 

        ( Get-WindowsImage -ImagePath $IP -Index $ID ).Version } 

# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Import-NewOSImage  # Imports an WIM/Operating System into MDT        ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        [ CmdLetBinding () ] Param ( 

            [ Parameter ( Position = 0 , ValueFromPipeline = $True ) ][ String ] $IP , 
            [ Parameter ( Position = 1 , ValueFromPipeline = $True ) ][ String ] $SF , 
            [ Parameter ( Position = 2 , ValueFromPipeline = $True ) ][ String ] $DF ) 

        Import-MDTOperatingSystem -Path $IP -SourceFile $SF -DestinationFolder $DF -Move -VB }

# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Import-NewTask   # Imports a dynamic task sequence                   ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        [ CmdLetBinding () ] Param ( 

            [ Parameter ( Position =  0 , ValueFromPipeline = $True ) ][ String ]    $PSP ,
            [ Parameter ( Position =  1 , ValueFromPipeline = $True ) ][ String ] $Formal , 
            [ Parameter ( Position =  2 , ValueFromPipeline = $True ) ][ String ]    $XML , 
            [ Parameter ( Position =  3 , ValueFromPipeline = $True ) ][ String ]   $Info , 
            [ Parameter ( Position =  4 , ValueFromPipeline = $True ) ][ String ]     $ID , 
            [ Parameter ( Position =  5 , ValueFromPipeline = $True ) ][ String ]    $Ver , 
            [ Parameter ( Position =  6 , ValueFromPipeline = $True ) ][ String ]    $SIP , 
            [ Parameter ( Position =  7 , ValueFromPipeline = $True ) ][ String ] $TSName , 
            [ Parameter ( Position =  8 , ValueFromPipeline = $True ) ][ String ]    $Org , 
            [ Parameter ( Position =  9 , ValueFromPipeline = $True ) ][ String ]    $WWW , 
            [ Parameter ( Position = 10 , ValueFromPipeline = $True ) ][ String ] $LMCred ) 

        Import-MDTTaskSequence -Path $PSP -Name $Formal -Template $XML -Comments $Info -ID $ID -Version $Ver ` 
            -OperatingSystemPath $SIP -FullName $TSName -OrgName $Org -HomePage $WWW -AdminPassword $LMCred -VB } 

# ____                                                                            ___________________________________________________//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Install-Hybrid # Provisions a base folder for Hybrid-DSC to install to  \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
        $Author      = "Secure Digits Plus LLC"                                                                          #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        $Title       = "[ $Author | Hybrid ] Desired State Controller Installation"                                          #\__//¯¯\\__//¯¯\\__//¯¯\\
        $Path        = "$Env:Temp\$Author"                                                                                       #\__//¯¯\\__//¯¯\\__//
        $Banner      = "banner.png"                                                                                              #/¯¯\\__//¯¯\\__//¯¯\\
        $Background  = "background.jpg"                                                                                          #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        If ( $Path -ne $Null )                                                                                                   #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            If ( ( Test-Path "$Path\$Background" ) -eq $True ) { $Background = "$Path\$Background" }                             #\__//¯¯\\__//¯¯\\__//
            If ( ( Test-Path "$Path\$Banner" )     -eq $True ) {     $Banner = "$Path\$Banner"     }                             #/¯¯\\__//¯¯\\__//¯¯\\
        }                                                                                                                        #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        If ( $Path -eq $Null ) {                                                                                                 #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
            $Path    = ( "$Env:Temp\$Author" | % { NI $_ -ItemType Directory -Force -VB } ).FullName                             #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
            [ Net.ServicePointManager ]::SecurityProtocol = [ Net.SecurityProtocolType ]::TLS12                                  #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
            $Site    = "https://i.ibb.co/XJ7wvnN/$Banner" , "https://i.ibb.co/sRw9T8S/$Background"                               #\__//¯¯\\__//¯¯\\__//
            $Image   = $Banner , $Background                                                                                     #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            $Out     = @( 0..1 | % { "$Path\$( $Image[$_] )" } )                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            0..1 | % { IWR -URI "$( $Site[$_] )" -OutFile "$( $Out[$_] )" }                                                      #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            ( $Banner , $Background ) = ( 0..1 | % { "$( $Out[$_] )" } )                                                         #/¯¯\\__//¯¯\\__//¯¯\\
        }                                                                                                                        #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\
#             Dynamic XAML Content Definitions        ¯¯¯\\__________________________[ Cannot Add Commentary to Static String ]______________________//
        $XAML = @"
        <Window
                        xmlns                 =       "http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                        xmlns:x               =                    "http://schemas.microsoft.com/winfx/2006/xaml"
                        Title                 =                                                          "$Title" 
                        Width                 =                                                             "640" 
                        Height                =                                                             "450" 
                        WindowStartupLocation =                                                    "CenterScreen"
                        Topmost               =                                                            "True" 
                        HorizontalAlignment   =                                                          "Center"
                        ResizeMode            =                                                        "NoResize" >
            <StackPanel>
                <StackPanel.Background>
                    <ImageBrush ImageSource   =                                                     "$Background" 
                                Stretch       =                                                   "UniformToFill" />
                </StackPanel.Background>
                <StackPanel
                        Height                =                                                             "250" >
                    <Image 
                        Width                 =                                                             "600" 
                        Height                =                                                             "250" 
                        Source                =                                                         "$Banner" 
                        HorizontalAlignment   =                                                          "Center" 
                        Margin                =                                                             "0,0" />
                </StackPanel>
                <StackPanel 
                        Height                =                                                             "120" >
                    <TextBlock
                        HorizontalAlignment   =                                                          "Center" 
                        FontSize              =                                                              "14"
                        FontWeight            =                                                            "Bold" 
                        Foreground            =                                                       "#FF84FF4A" 
                        FontFamily            =                                                        "Segoe UI" >
                        <TextBlock.Effect>
                            <DropShadowEffect
                                ShadowDepth   =                                                               "5"
                                Color         =                                                       "#FF5B5546" />
                        </TextBlock.Effect>
                            Enter an installation folder for Hybrid-DSC
                        </TextBlock>
                    <TextBox
                        Name                  =                                                         "Install"
                        Height                =                                                              "22" 
                        TextWrapping          =                                                            "Wrap" 
                        Width                 =                                                             "300" 
                        Margin                =                                                              "10" />
                </StackPanel>
                <StackPanel 
                    Orientation               =                                                      "Horizontal" 
                    FlowDirection             =                                                     "LeftToRight" 
                    VerticalAlignment         =                                                          "Bottom" 
                    HorizontalAlignment       =                                                          "Center" 
                    Height                    =                                                              "40" 
                    Margin                    =                                                     "145,0,145,0" >
                    <Button 
                        Name                  =                                                           "Start" 
                        Content               =                                                           "Start"  
                        HorizontalAlignment   =                                                            "Left" 
                        Height                =                                                              "20" 
                        Width                 =                                                             "170" />
                    <Button 
                        Name                  =                                                          "Cancel" 
                        Content               =                                                          "Cancel" 
                        HorizontalAlignment   =                                                           "Right" 
                        Height                =                                                              "20" 
                        Width                 =                                                             "170" />
                </StackPanel>
            </StackPanel>
        </Window>
"@ #________[ Return to Normal Script Mode ]__________________________________________________________________________________________________________
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____[ Converts the XAML into a Window ]_______//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $GUI = Convert-XAMLtoWindow -Xaml $XAML -NamedElement "Install" , "Start" , "Cancel" -PassThru                   #\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                             #\__//¯¯\\__//¯¯\\__//¯¯\\
        $GUI.Cancel.Add_Click( { $GUI.DialogResult = $False } )                                                                  #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        $GUI.Start.Add_Click( {                                                                                                  #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\    
        "Installation Location" | % { $1 = "You must enter a $_" ; $2 = "$_ Missing" }                                           #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        If ( $GUI.Install.Text -eq "" ) { [ System.Windows.MessageBox ]::Show( $1 , $2 ) }                                       #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        Else { $GUI.DialogResult = $True } })                                                                                    #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___[ Synchronizes WPF with Window Element ]___//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $Output = Show-WPFWindow -GUI $GUI                                                                               #\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                             #\__//¯¯\\__//¯¯\\__//¯¯\\
        If ( $Output -eq $True )                                                                                                 #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            ( $Base , $Vendor , $Registry ) = ( $GUI.Install.Text , "Secure Digits Plus LLC" , "HKLM:\SOFTWARE\Policies" )       #\__//¯¯\\__//¯¯\\__//
            $BasePath = "$Registry\$Vendor"                                                                                      #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            $Base | ? { ( Test-Path $_ ) -ne $True } | % {                                                                       #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                Wrap-Action "Creating" "[~] Installation Directory"                                                              #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                NI $_ -ItemType Directory                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                If ( $_ -eq $False )                                                                                             #/¯¯\\__//¯¯\\__//¯¯\\
                {                                                                                                                #\__//¯¯\\__//¯¯\\__//
                    Wrap-Action "Exception" "[!] The directory could not be created"                                             #/¯¯\\__//¯¯\\__//¯¯\\
                    Read-Host "Press Enter to Exit"                                                                              #\__//¯¯\\__//¯¯\\__//
                    Exit                                                                                                         #/¯¯\\__//¯¯\\__//¯¯\\
                }                                                                                                                #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
                Wrap-Action "Created" "[+] Installation Directory"                                                               #\__//¯¯\\__//¯¯\\__//
            }                                                                                                                    #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            Sleep -M 100                                                                                                         #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            $Base | ? { ( Test-Path $_ ) -eq $True } | % {                                                                       #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                $BasePath | ? { ( Test-Path $_ ) -eq $False } | % {                                                              #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                    Wrap-Action "Creating" "[~] Registry Entry for Installation path"                                            #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                    NI -Path $Registry -Name $Vendor -Credential $Cred                                                           #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                    If ( $? -ne $True )                                                                                          #/¯¯\\__//¯¯\\__//¯¯\\
                    {                                                                                                            #\__//¯¯\\__//¯¯\\__//
                        Wrap-Action "Exception" "[!] Registry Entry Creation Failed"                                             #/¯¯\\__//¯¯\\__//¯¯\\
                        Read-Host "Press Enter to Exit"                                                                          #\__//¯¯\\__//¯¯\\__//
                        Exit                                                                                                     #/¯¯\\__//¯¯\\__//¯¯\\
                    }                                                                                                            #\__//¯¯\\__//¯¯\\__//
                    ( "Hybrid-DSC" , $Base ) , ( "Installation Date" , ( Get-Date ) ) | % {                                      #/¯¯\\__//¯¯\\__//¯¯\\
                        SP -Path $BasePath -Name $_[0] -Value $_[1]                                                              #\__//¯¯\\__//¯¯\\__//
                        Wrap-Action "Created" "[+] $_"                                                                           #/¯¯\\__//¯¯\\__//¯¯\\
                    }                                                                                                            #\__//¯¯\\__//¯¯\\__//
                }                                                                                                                #/¯¯\\__//¯¯\\__//¯¯\\
            }                                                                                                                    #\__//¯¯\\__//¯¯\\__//
            Return $Base                                                                                                         #/¯¯\\__//¯¯\\__//¯¯\\
        }                                                                                                                        #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        Else                                                                                                                     #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            Wrap-Action "Exception" "[!] The exited or the dialogue failed"                                                      #\__//¯¯\\__//¯¯\\__//
            Read-Host "Press Enter to Exit"                                                                                      #/¯¯\\__//¯¯\\__//¯¯\\
            Exit                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        }                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
    }                                                                                                                            #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Populate-DSCRoot # [ Generates DSC Folder Structure relative to installation path ]     \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #______________________________________________________________________________________________//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $Base = ( gp "HKLM:\Software\Policies\Secure Digits Plus LLC" ).'Hybrid-DSC'                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        $Inst = @( gci "C:\Hybrid-Installation\Hybrid" ).FullName                                                            #\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        Start $Base                                                                                                              #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $Root = "Resources" , "Tools" , "Images" , "Profiles" , "Certificates" , "Applications"                                  #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        0..5 | % { "$Base\($_)$( $Root[$_] )" } | ? { ( Test-Path $_ ) -ne $True } | % { NI -Path $_ -ItemType Directory }       #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $Root = ( gci $Base ).FullName                                                                                           #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $Path = @{  0 = @() ; 1 = "Drivers" , "DISM++" , "VM" , "Remaster" ;                                                     #/¯¯\\__//¯¯\\__//¯¯\\
                    2 = @( "DC2016" ; @( "E" , "H" , "P" | % { "$_`64" ; "$_`86" } | % { "10$_" } ) )                            #\__//¯¯\\__//¯¯\\__//
                    3 = @() ; 4 = "Root" | % { "$_" , "CA" , "Auth$_" } ;                                                        #/¯¯\\__//¯¯\\__//¯¯\\
                    5 = "chrome" , "silverlight" , "jre" , "libre" , "mwb" , "flash" ,                                           #\__//¯¯\\__//¯¯\\__//
                    "air" , "reader" , "ccleaner" , "klite" ,  "tv" }                                                            #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $File = @{  0 = @(   "Server" , "Client" | % { "Initialize-Hybrid$_.ps1" } ; "logo.bmp" , "bg.jpg" | % { "OEM$_" }       #/¯¯\\__//¯¯\\__//¯¯\\
                    "StartLayout.xml" ; "UEV-Profile.ps1" ) ; 1 = @() ; 2 = @() ; 3 = @() ; 4 = @() ; 5 = @() }                  #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        ForEach ( $i in 0..5 )                                                                                                   #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            $R = $Root[$i] ; $P = $Path[$i] ; $C = $Path[$i].Count ; $F = $File[$i] ; $D = $File[$i].Count                       #\__//¯¯\\__//¯¯\\__//
            If ( ( $C -gt 1 ) -or ( $D -gt 1 ) )                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
            {                                                                                                                    #\__//¯¯\\__//¯¯\\__//
                If ( $C -gt 1 )                                                                                                  #/¯¯\\__//¯¯\\__//¯¯\\
                {                                                                                                                #\__//¯¯\\__//¯¯\\__//
                    ForEach ( $j in ( 0..( $C - 1 ) ) )                                                                          #/¯¯\\__//¯¯\\__//¯¯\\
                    {                                                                                                            #\__//¯¯\\__//¯¯\\__//
                        "$R\($j)$( $P[$j] )" | ? { ( Test-Path $_ ) -eq $False } | % { NI -Path $_ -ItemType Directory }         #/¯¯\\__//¯¯\\__//¯¯\\
                    }                                                                                                            #\__//¯¯\\__//¯¯\\__//
                }                                                                                                                #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                If ( $D -gt 1 )                                                                                                  #/¯¯\\__//¯¯\\__//¯¯\\
                {                                                                                                                #\__//¯¯\\__//¯¯\\__//
                    ForEach ( $k in ( 0..( $D - 1 ) ) )                                                                          #/¯¯\\__//¯¯\\__//¯¯\\
                    {                                                                                                            #\__//¯¯\\__//¯¯\\__//
                        $F[$k] | ? { ( Test-Path "$R\$_" ) -eq $False } | % { Robocopy "$( $Inst[$i] )" "$R" "$_" }              #/¯¯\\__//¯¯\\__//¯¯\\
                    }                                                                                                            #\__//¯¯\\__//¯¯\\__//
                }                                                                                                                #/¯¯\\__//¯¯\\__//¯¯\\
            }                                                                                                                    #\__//¯¯\\__//¯¯\\__//
        }                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
    }                                                                                                                            #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Collect-Applications # Concatenates strings into an indexed hash table       ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #\_________________________________________________________________________________________\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $Base = ( gp "HKLM:\Software\Policies\Secure Digits Plus LLC" ).'Hybrid-DSC'                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                             #\__//¯¯\\__//¯¯\\__//¯¯\\
        If ( ( Test-Path $Base ) -ne $True )                                                                                     #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            Wrap-Action "Exception" "[!] Folder not found" ; Read-Host "Press Enter to Exit" ; Exit }                            #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        If ( ( GCI $Base -EA 0 ).Count -eq 0 )                                                                                   #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            Wrap-Action "Exception" "[!] Folder found empty" ; Read-Host "Press Enter to Exit" ; Exit }                          #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
# ____                                ___________________________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____[ Application Names ]________\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $N = @( @( "Google Chrome" , "Microsoft Silverlight" , "Java Runtime Environment" , "Libre Office Fresh" | % {   #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        "$_ (x86)" , "$_ (x64)" } ) ;                                                                                        #\__//¯¯\\__//¯¯\\__//¯¯\\
        @( "Malwarebytes" ; @( "Flash" , "Air" + @( "Reader DC" | % { "$_" ; "$_ MUI" } ) | % { "Adobe $_" } ) +                 #\__//¯¯\\__//¯¯\\__//
        "CCleaner" , "K-Lite Codec Pack Full" , "Teamviewer 14" ) | % { "$_ (x22)" } )                                           #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
# ____                                ___________________________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____[ Application Versions ]______\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $V = @( 0..1 | % { "75.0.3770.142" } ; 0..1 | % { "5.1.50907.0" } ; 0..1 | % { "8.0.211" } ;                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        0..1 | % { "6.2.5" } ; "3.8.3.296511612" ; "32.0.0.223" ; "32.0.0.125" ; "2019.012.20064" ; "2019.012.20035" ;       #\__//¯¯\\__//¯¯\\__//¯¯\\
        "5.60.7307" ; "15.0.4" ; "14.4.2669" )                                                                                   #\__//¯¯\\__//¯¯\\__//
# ____                                ___________________________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____[ Application URLs ]__________\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $U = @(                                                                                                          #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        @( "" , "64" | % {                                                                                                   #\__//¯¯\\__//¯¯\\__//¯¯\\
            "https://dl.google.com/tag/s/dl/chrome/install/googlechromestandaloneenterprise$_.msi" } ) +                         #\__//¯¯\\__//¯¯\\__//
        @( "" , "_x64" | % {                                                                                                         #\__//¯¯\\__//¯¯\\
        "https://download.microsoft.com/download/F/D/0/FD0B0093-DE8A-4C4E-BDC4-F0C56D72018C/50907.00/Silverlight$_.exe" } ) +            #\__//¯¯\\__//
        @( 7 , 9 | % {                                                                                                                   #/¯¯\\__//¯¯\\
        "https://javadl.oracle.com/webapps/download/AutoDL?BundleId=23872$_`_478a62b7d4e34b78b671c754eaaf38ab" } ) +                     #\__//¯¯\\__//
        @( ( "" , 86 ) , ( "_64" , 64 ) | % {                                                                                            #/¯¯\\__//¯¯\\
        "https://download.documentfoundation.org/libreoffice/stable/6.2.5/win/x86$( $_[0] )/LibreOffice_6.2.5_Win_x$( $_[1] ).msi" } ) + #\__//¯¯\\__//
        "https://downloads.malwarebytes.com/file/mb3/" ,                                                                                 #/¯¯\\__//¯¯\\
        "https://download.macromedia.com/get/flashplayer/pdc/32.0.0.223/install_flash_player_32_plugin.msi" ,                            #\__//¯¯\\__//
        "http://airdownload.adobe.com/air/win/download/32.0/AdobeAIRInstaller.exe" ,                                                     #/¯¯\\__//¯¯\\
        "http://ardownload.adobe.com/pub/adobe/reader/win/AcrobatDC/1901020064/AcroRdrDC1901020064_MUI.exe" ,                            #\__//¯¯\\__//
        "http://ftp.adobe.com/pub/adobe/reader/win/AcrobatDC/1901220035/AcroRdrDCUpd1901220035_MUI.msp" ,                                #/¯¯\\__//¯¯\\
        "https://download.ccleaner.com/ccsetup560.exe" ,                                                                                 #\__//¯¯\\__//
        "https://files3.codecguide.com/K-Lite_Codec_Pack_1504_Full.exe" ,                                                                #/¯¯\\__//¯¯\\
        "https://download.teamviewer.com/download/version_14x/TeamViewer_Setup.exe" )                                                    #\__//¯¯\\__//
# ____                                ___________________________________________________________________________________________________#/¯¯\\__//¯¯\\
#//  \\______________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___[ Application File Names ]_____\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $F = @( @( "chrome" , "silverlight" , "jre" , "libre" | % { "$_(x86)" , "$_(x64)" } ) ;                          #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        @( "mwb" ; @( "flash" , "air" + @( "reader" | % { "$_" ; "$_`mui" } ) ) + "ccleaner" , "klite" , "tv" ) | % {        #\__//¯¯\\__//¯¯\\__//¯¯\\
        "$_(x22)" } )                                                                                                            #\__//¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        $X = @( "msi" , "exe" , "msp" )[0,0,1,1,1,1,0,0,1,1,1,1,2,1,1,1]                                                             #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        $P = @( ( GCI $Base -Filter "*Applications" -EA 0 ).FullName | % { ( GCI $_ ).FullName } )[0,0,1,1,3,3,4,4,5,6,7,8,8,9,10,2] #/¯¯\\__//¯¯\\__//
# ____                                ________________________________________________________________________________________________\__//¯¯\\__//¯¯\\
#//  \\______________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\__[ Application Hash Values ]_____\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//__\\__//__\\__//¯¯\\__//¯¯\\
        $S =            "f5ae4e45ec177ee53513426aabef2d0c0967584c30327678afb6f77535718357" ,  #                 [ Google Chrome x86 ]//¯¯\\__//¯¯\\__//
                        "a5941959bf0f5058702252d411cf39c2982c751f5b662c48b651d94ce4a7ee19" ,  #                 [ Google Chrome x64 ]\\__//¯¯\\__//¯¯\\
                        "88e1b76bdf799478a72fa27db0bfe7bc5d02cc7e53675967399300448f0e266f" ,  #                   [ Silverlight x86 ]//¯¯\\__//¯¯\\__//
                        "8d263a6f42a378073b6f057f242a42076f9f4082340153c2e27ecc959c5036aa" ,  #                   [ Silverlight x64 ]\\__//¯¯\\__//¯¯\\
                        "47DE97325B8EA90EA9F93E1595CC7F843DA0C9C6E4C9532ABEA3A194CFB621D9" ,  #                          [ Java x86 ]//¯¯\\__//¯¯\\__//
                        "C18CF8F2776B69DC838440AADFAAE36F50717636F38EEC5F1E4A27A8CB4F20FB" ,  #                          [ Java x64 ]\\__//¯¯\\__//¯¯\\
                        "717fb9e17a3feb8af1662e668b919db86fab343303b78f88c7859003056ee010" ,  #                         [ Libre x86 ]//¯¯\\__//¯¯\\__//
                        "9b01f6f382dbb31367e12cfb0ad4c684546f00edb20054eeac121e7e036a5389" ,  #                         [ Libre x64 ]\\__//¯¯\\__//¯¯\\
                        "8fb48cc837e050197b3274d8a8857d0cb353aebadd1e67952af85879f2363a34" ,  #                  [ Malwarebytes x22 ]//¯¯\\__//¯¯\\__//
                        "ee34f7a2ecd40039738861fd331ff9d9c5320a33d61b62ae71e108b78f999892" ,  #                   [ Adobe Flash x22 ]\\__//¯¯\\__//¯¯\\
                        "6718308E10A45176155D0ECC8458BD3606308925B91F26A7D08C148CF52C9DB3" ,  #                     [ Adobe Air x22 ]//¯¯\\__//¯¯\\__//
                        "81953f3cf426cbe9e6702d1af7f727c59514c012d8d90bacfb012079c7da6d23" ,  #               [ Adobe Reader DC x22 ]\\__//¯¯\\__//¯¯\\
                        "67AAB19943FA63393F15E1354FACCE65BED476D1C2BB5D311DB8450614A33200" ,  #    [ Adobe Reader DC MUI/Update x22 ]//¯¯\\__//¯¯\\__//
                        "00be05f95e08eb4f181ccde15403e782150a616cb93fd74525c99920f53a2cea" ,  #                      [ CCleaner x22 ]\\__//¯¯\\__//¯¯\\
                        "1F6BDE89E752811FDC04492D0F73216720B625E54966B3E350659BABD9AD7A83" ,  #             [ K-Lite Codec Pack x22 ]//¯¯\\__//¯¯\\__//
                        "df26627cc29716b65a3ed72f78d59808244f9bc4ad2624657ddbee79d2baa422"    #                 [ Teamviewer 14 x22 ]\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $Item = @( 0..15 )                                                                                                       #/¯¯\\__//¯¯\\__//¯¯\\
        0..15 | % { $Item[$_] = @{ Name = "$($N[$_]) v$($V[$_])" ; File = "$($P[$_])\$($F[$_]).$($X[$_])" ;                      #\__//¯¯\\__//¯¯\\__//
        URL = "$($U[$_])" ; Sum = "$($S[$_])"} } Return $Item }                                                                  #/¯¯\\__//¯¯\\__//¯¯\\
# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Review-Applications # Allows for the user to check & verify the applications list   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #__________________________________________________________________________________________\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        Switch( $Host.UI.PromptForChoice( "Application Template Review" , "Review Designated Application Template?" ,    #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        [ System.Management.Automation.Host.ChoiceDescription [] ]@( '&Yes' , '&No' ) , [ Int ] 0 ) )                        #\__//¯¯\\__//¯¯\\__//¯¯\\
        {                                                                                                                        #\__//¯¯\\__//¯¯\\__//
            0 { Wrap-Action "Review" "[~] User chose to review the applications list"                                            #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                $Item = @( Collect-Applications )                                                                                #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
                $j = 0 ; $Item | % {                                                                                             #/¯¯\\__//¯¯\\__//¯¯\\
       "#\\¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\"#//¯¯\\__//
       "#// @ $( If ( $j -lt 10 ) { "$J " } Else { "$J" } ) $( "/\ \/ " * 20                                                            )//"#\\__//¯¯\\
       "#\\______________________________________________________________________________________________________________________________\\"#//¯¯\\__//
       "#//"                                                                                                                     #/¯¯\\__//¯¯\\__//¯¯\\
       "#\\  [ $(               $_.Name ) ]"                                                                                     #\__//¯¯\\__//¯¯\\__//
       "#//  =$( ( "-=" ) * ( ( $_.Name.Length / 2 ) ) )-="                                                                      #/¯¯\\__//¯¯\\__//¯¯\\
       "#\\        URL : $(      $_.URL )"                                                                                       #\__//¯¯\\__//¯¯\\__//
       "#//       File : $(     $_.File )"                                                                                       #/¯¯\\__//¯¯\\__//¯¯\\
       "#\\      C-Sum : $(      $_.Sum )"                                                                                       #\__//¯¯\\__//¯¯\\__//
       "#//"                                                                                                                     #/¯¯\\__//¯¯\\__//¯¯\\
                $Null = ( $j = $j + 1 ) }                                                                                        #\__//¯¯\\__//¯¯\\__//
                Read-Host "Press Enter to Continue" }                                                                            #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            1 { Wrap-Action "Bypass" "[~] User chose to bypass the application review screen"                                    #/¯¯\\__//¯¯\\__//¯¯\\
                Sleep -S 1 }}}                                                                                                   #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
# ____                                                                            _______________________________________________#\__//¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//
    Function Download-Applications # Reaches out to the internet to retrieve the files listed above and verifies the file integrity  \\__//¯¯\\__//¯¯\\
    { #\_____________________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//
                                                                                                                             #\__//¯¯\\__//¯¯\\__//¯¯\\
        $Item  = @( Collect-Applications ) ; $Base  = ( GP "HKLM:\Software\Policies\Secure Digits Plus LLC" ).'Hybrid-DSC'       #\__//¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        Wrap-Action "Downloading" "[+] Application Template" ; IPMO BITSTransfer ; $Total = [ System.Diagnostics.Stopwatch ]::StartNew() #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        $Time  = @( 0..15 ) ; 0..15 | % {                                                                                                #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
            If ( ( Test-Path $Item.File[$_] ) -ne $True )                                                                                #\__//¯¯\\__//
            {                                                                                                                            #/¯¯\\__//¯¯\\
                Wrap-Action "Downloading" "$( $Item.Name[$_] )" ; $Time[$_] = [ System.Diagnostics.Stopwatch ]::StartNew()               #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
                Start-BitsTransfer -Source $Item.URL[$_] -Destination $Item.File[$_] -TransferType Download -Description $Item.Name[$_]  #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
                If ( $? -eq $False ) { IWR -Uri $Item.URL[$_] -OutFile $Item.File[$_] }                                                  #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
                $Time[$_].Stop()                                                                                                         #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
                Write-Host -F Cyan "Time Elapsed : $( ( $Time[$_] | Select Elapsed ).Elapsed ) $( $Item.Name[$_] )" } }                  #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        $Total | % { $_.Stop() ; $T = $_.Elapsed }                                                                                       #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        $Size    = @( gci "$Base\(5)Applications" -Recurse -File | Select Length | % { $_.Length } | Measure -Sum ).Sum                  #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        $Rate    = ( ( $Size / 1MB ) / ( ( $T.Minutes * 60 ) + ( $T.Seconds ) ) | % { "{0:n3}" -f $_ } )                                 #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        Wrap-Action "Downloads Complete" "[ Total Time Elapsed @: $( $T.Elapsed ) @: $Rate MB/sec ]"                                     #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        0..15 | % { $ID = $( $Item.Name[$_] ) ;                                                                                          #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        If ( ( Test-Path $Item.File[$_] ) -ne $True ) { Wrap-Action "Exception" "[!] $ID Not Found" }                                    #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        Else { $Hash = ( Get-FileHash -Path $Item.File[$_] -Algorithm SHA256 ).Hash                                                      #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
                    If ( $Hash -eq $Item.Sum[$_] ) { Wrap-Action "[+] Checksum Valid" "$ID" }                                            #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
                    Else { Wrap-Action "[!] Checksum Invalid" "$ID" ; RI $Item.File[$_] -Force -VB } } } }                               #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
# ____                                                                            _______________________________________________________#\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Provision-Installation # Begins the installation for all remaining deployment share tools           //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #\_________________________________________________________________________________________________________\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//

    $Named = @( 0..4 | % {   "r$_" } ; 
                0..2 | % { "iis$_" } ; 
                0..2 | % {  "dc$_" } ; 
                0..3 | % {   "p$_" } ; 
                0..1 | % { "img$_" } ; 
                   0 | % {   "n$_" } ) 

        $Author      = "Secure Digits Plus LLC"                                                                          #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        $Title       = "[ $Author | Hybrid ] Desired State Controller Installation"                                          #\__//¯¯\\__//¯¯\\__//¯¯\\
        $Path        = "$Env:Temp\$Author"                                                                                       #\__//¯¯\\__//¯¯\\__//
        $Banner      = "banner.png"                                                                                              #/¯¯\\__//¯¯\\__//¯¯\\
        $Background  = "background.jpg"                                                                                          #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        If ( $Path -ne $Null )                                                                                                   #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            If ( ( Test-Path "$Path\$Background" ) -eq $True ) { $Background = "$Path\$Background" }                             #\__//¯¯\\__//¯¯\\__//
            If ( ( Test-Path "$Path\$Banner"     ) -eq $True ) {     $Banner = "$Path\$Banner"     }                             #/¯¯\\__//¯¯\\__//¯¯\\
        }                                                                                                                        #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
        If ( $Path -eq $Null ) {                                                                                                 #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
            $Path    = ( "$Env:Temp\$Author" | % { NI $_ -ItemType Directory -Force -VB } ).FullName                             #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
            [ Net.ServicePointManager ]::SecurityProtocol = [ Net.SecurityProtocolType ]::TLS12                                  #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
            $Site    = "https://i.ibb.co/XJ7wvnN/$Banner" , "https://i.ibb.co/sRw9T8S/$Background"                               #\__//¯¯\\__//¯¯\\__//
            $Image   = $Banner , $Background                                                                                     #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            $Out     = @( 0..1 | % { "$Path\$( $Image[$_] )" } )                                                                 #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            0..1 | % { IWR -URI "$( $Site[$_] )" -OutFile "$( $Out[$_] )" }                                                      #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
            ( $Banner , $Background ) = ( 0..1 | % { "$( $Out[$_] )" } )                                                         #/¯¯\\__//¯¯\\__//¯¯\\
        } 
# ____                                ________________________________________________________________________________________________\__//¯¯\\__//¯¯\\
#//  \\______________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____[ First Tab Values ]_________\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//__\\__//__\\__//¯¯\\__//¯¯\\
    $FirstTags  = @( "" ; "" ; "System Root 'C:\'" ; 
    @( "Secured" | % { "Deploy Folder '$_'" , "SMB Name '$_$'" , "PSDrive '$_`:'" } ) + "Description '[Dev]'" ; 
    "" ; "" ; "BITS / IIS Name 'Hybrid'" ; "IIS App Pool 'SecureApp'" ; "Virtual Host / Proxy" ; 
    "" ; "" ; "NetBIOS Domain" ; @( "User" , "P/W" | % { "Child Admin $_" } ) ) 

    $FirstOffs  = @( "" ; "" ; @( $Named[0..4] ) + "" ; "" ; @( $Named[5..7] ) + "" ; "" ; @( $Named[8..10] ) )

    $FirstList  = @{    RowDef    = @( 0..16                 | % { 
    "                            <RowDefinition Height                    =                               '*' />
    "}) 
                        TextBlock = @( 2..6 + 9..11 + 14..16 | % { 
    "                      <TextBlock 
                                                Grid.Row             =                                '$_' 
                                                Grid.Column          =                                '0' 
                                                Margin               =                                '5' 
                                                FontSize             =                               '14' 
                                                HorizontalAlignment  =                           'Center'
                                                FontWeight           =                             'Bold' 
                                                Foreground           =                        '#FF84FF4A' 
                                                FontFamily           =                         'Segoe UI' >
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth  =                                '5'
                                                        Color        =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                                                    $( $FirstTags[$_] )
                           </TextBlock>
    "})
                        TextBoxes = @( 2..6 + 9..11 + 14..15 | % { 
    "                       <TextBox  
                                                Name                 =                               '$( $FirstOffs[$_] )' 
                                                Grid.Row             =                               '$_' 
                                                Grid.Column          =                                '1' 
                                                Margin               =                                '5' 
                                                Height               =                               '20' 
                                                FontSize             =                               '10' />
    "}) + @( 16                          | % { 
    "                       <PasswordBox 
                                                Name                 =                               '$( $FirstOffs[$_] )'
                                                Grid.Row             =                               '$_' 
                                                Grid.Column          =                                '1' 
                                                Margin               =                                '5' 
                                                Height               =                               '20' 
                                                FontSize             =                               '10' 
                                                PasswordChar         =                                '*' >
                            </PasswordBox>
    "})} 
# ____                                ________________________________________________________________________________________________\__//¯¯\\__//¯¯\\
#//  \\______________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____[ Second Tab Values ]________\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//__\\__//__\\__//¯¯\\__//¯¯\\

    $SecondTags  = @( "" ; "Company Name" ; @( "Website" , "Phone" , "Hours" | % { "Support $_" ; } ) + 
    ""; "Logo [ 120x120.bmp ]" ; "Background" ;""; "Branch / FQDN" ) 

    $SecondOffs  = @( "" ; @( $Named[11..14] ) + "" ; @( $Named[15..16] ) + "" ; $( $Named[17] ) ) 

    $SecondList  = @{   RowDef    = @( 0..10 | % { 
    "                            <RowDefinition Height                    =                               '32' /> 
    "}) 
                        TextBlock = @( 1..4 + 6 , 7 , 9 | % { 
    "                      <TextBlock 
                                                Grid.Row             =                                '$_' 
                                                Grid.Column          =                                '0' 
                                                Margin               =                                '5' 
                                                FontSize             =                               '14' 
                                                HorizontalAlignment  =                           'Center'
                                                FontWeight           =                             'Bold' 
                                                Foreground           =                        '#FF84FF4A' 
                                                FontFamily           =                         'Segoe UI' >
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth  =                                '5'
                                                        Color        =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                                                    $( $SecondTags[$_] )
                           </TextBlock>
    "})
                        TextBoxes = @( 1..4 + 6 , 7 , 9 | % { 
    "                       <TextBox 
                                                Name                 =                               '$( $SecondOffs[$_] )'
                                                Grid.Row             =                                '$_' 
                                                Grid.Column          =                                '1' 
                                                Height               =                               '20' 
                                                FontSize             =                               '10' 
                                                Margin               =                                '5' />
    "})} 
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\
#             Dynamic XAML Content Definitions        ¯¯¯\\__________________________[ Cannot Add Commentary to Static String ]______________________//
    
    $XAMLRoot = @"
    <Window
                    xmlns                 =       'http://schemas.microsoft.com/winfx/2006/xaml/presentation'
                    xmlns:x               =                    'http://schemas.microsoft.com/winfx/2006/xaml'
                    Title                 =    '[ Secure Digits Plus LLC | Hybrid ] Desired State Controller' 
                    Width                 =                                                             '640' 
                    Height                =                                                             '850' 
                    WindowStartupLocation =                                                    'CenterScreen'
                    Topmost               =                                                            'True' 
                    HorizontalAlignment   =                                                          'Center'
                    ResizeMode            =                                                        'NoResize'  >
        <StackPanel>
            <StackPanel.Background>
                <ImageBrush ImageSource   =                                                     '$Background' 
                            Stretch       =                                                   'UniformToFill' />
            </StackPanel.Background>
            <StackPanel
                    Height                =                                                             '250'  >
                <Image 
                    Width                 =                                                             '640' 
                    Height                =                                                             '240' 
                    Source                =                                                         '$Banner' 
                    HorizontalAlignment   =                                                          'Center' 
                    Margin                =                                                             '10' />
            </StackPanel>
            <StackPanel 
                    Height                =                                                             '515'  >
                <TabControl 
                    Height                =                                                             '515' 
                    HorizontalContentAlignment =                                                     'Center' 
                    HorizontalAlignment   =                                                          'Center' 
                    VerticalAlignment     =                                                          'Center' 
                    Background            =                                                        '{x:Null}' 
                    BorderBrush           =                                                        '{x:Null}' 
                    Foreground            =                                                        '{x:Null}' 
                    Margin                =                                                            '10,0' >
                    <TabItem 
                        Header            =                                         'Stage Deployment Server' 
                        HorizontalAlignment =                                                        'Center' 
                        Width             =                                                             '240' 
                        BorderBrush       =                                                        '{x:Null}'  >
                        <TabItem.Effect>
                            <DropShadowEffect/>
                        </TabItem.Effect>
                        <Grid 
                            Height            =                                                         '480' 
                            VerticalAlignment =                                                         'Top'  >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width =                                              '0.5*' />
                                <ColumnDefinition Width =                                              '0.5*' />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                $( $FirstList.RowDef )
                            </Grid.RowDefinitions>
                            <TextBlock 
                                                    Grid.Row             =                                '0'
                                                    Grid.Column          =                                '0'
                                                    Grid.ColumnSpan      =                                '2'
                                                    Margin               =                                '5'  
                                                    HorizontalAlignment  =                           'Center'
                                                    TextAlignment        =                           'Center'
                                                    FontSize             =                               '14'
                                                    FontWeight           =                             'Bold' 
                                                    Foreground           =                        '#FF84FF4A' 
                                                    FontFamily           =                         'Segoe UI' >
                                # - - - - - [ MDT Base Share Settings ] - - - - - #
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth  =                                '5'
                                                        Color        =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                            </TextBlock>
                            <TextBlock 
                                                    Grid.Row             =                                '1'
                                                    Grid.Column          =                                '0'
                                                    Grid.ColumnSpan      =                                '2'
                                                    Margin               =                                '5' 
                                                    HorizontalAlignment  =                           'Center'
                                                    TextAlignment        =                           'Center'
                                                    FontSize             =                               '14'
                                                    FontWeight           =                             'Bold' 
                                                    Foreground           =                        '#FF84FF4A' 
                                                    FontFamily           =                         'Segoe UI' >
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth      =                                '5'
                                                        Color            =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                                These settings will generate a new MDT share
                            </TextBlock>
                            $( $FirstList.TextBlock[0..4] )
                            <RadioButton            x:Name              =                            'Legacy' 
                                                    Grid.Row            =                                 '7'
                                                    Grid.Column         =                                 '0' 
                                                    Margin              =                                 '5' 
                                                    Content             =                          'Disabled' 
                                                    HorizontalAlignment =                            'Center' 
                                                    VerticalAlignment   =                            'Center'
                                                    Foreground          =                              'Gray' 
                                                    IsEnabled           =                             'False' >
                                <RadioButton.Effect>
                                    <DropShadowEffect/>
                                </RadioButton.Effect>
                            </RadioButton>
                            <RadioButton            x:Name              =                        'PowerShell' 
                                                    Grid.Row            =                                 '7' 
                                                    Grid.Column         =                                 '1' 
                                                    Margin              =                                 '5' 
                                                    Content             =                          'Disabled' 
                                                    HorizontalAlignment =                            'Center' 
                                                    VerticalAlignment   =                            'Center' 
                                                    Foreground          =                              'Gray'
                                                    IsEnabled           =                             'False' >
                                <RadioButton.Effect>
                                    <DropShadowEffect/>
                                </RadioButton.Effect>
                            </RadioButton>
                            <!-- # - - - - [ BITS / IIS Config ] - - - - #  -->
                            <TextBlock 
                                                    Grid.Row             =                                '8'
                                                    Grid.Column          =                                '0'
                                                    Grid.ColumnSpan      =                                '2' 
                                                    Margin               =                                '5' 
                                                    FontSize             =                               '14'
                                                    HorizontalAlignment  =                           'Center'
                                                    TextAlignment        =                           'Center'
                                                    Foreground           =                             'Lime' >
                                <TextBlock.Effect>
                                    <DropShadowEffect/>
                                </TextBlock.Effect>
                            # - - - - - - - - [ BITS / IIS Config ] - - - - - - - - #
                            </TextBlock>
                            $( $FirstList.TextBlock[5..7] )
                            <RadioButton 
                                                    x:Name               =                            'IIS_I'
                                                    Grid.Row             =                               '12'
                                                    Grid.Column          =                                '0'
                                                    Margin               =                                '5' 
                                                    Content              =                         'Disabled' 
                                                    HorizontalAlignment  =                           'Center'
                                                    VerticalAlignment    =                           'Center' 
                                                    Foreground           =                             'Gray' 
                                                    IsEnabled            =                            'False' >
                                <RadioButton.Effect>
                                    <DropShadowEffect/>
                                </RadioButton.Effect>
                            </RadioButton>
                            <RadioButton 
                                                    x:Name               =                            'IIS_X'
                                                    Grid.Row             =                               '12'
                                                    Grid.Column          =                                '1'
                                                    Margin               =                                '5'
                                                    Content              =                         'Disabled'
                                                    HorizontalAlignment  =                           'Center'
                                                    VerticalAlignment    =                           'Center'
                                                    Foreground           =                             'Gray'
                                                    IsEnabled            =                            'False' >
                                <RadioButton.Effect>
                                    <DropShadowEffect/>
                                </RadioButton.Effect>
                            </RadioButton>
                            <TextBlock 
                                                    Grid.Row             =                               '13'
                                                    Grid.Column          =                                '0' 
                                                    Grid.ColumnSpan      =                                '2' 
                                                    Margin               =                                '5'
                                                    HorizontalAlignment  =                           'Center'
                                                    TextAlignment        =                           'Center'
                                                    FontSize             =                               '14'
                                                    FontWeight           =                             'Bold' 
                                                    Foreground           =                        '#FF84FF4A' 
                                                    FontFamily           =                         'Segoe UI' >
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth      =                                '5'
                                                        Color            =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                            # - - [ Network and Source Credentials ]  - - #
                            </TextBlock>
                            $( $FirstList.TextBlock[8..10] )
                            $( $FirstList.TextBoxes[0..10] )
                        </Grid>
                    </TabItem>
                    <TabItem 
                        Header                                           =                       'Image Info' 
                        HorizontalAlignment                              =                           'Center' 
                        Width                                            =                              '150' 
                        BorderBrush                                      =                         '{x:Null}' >
                        <TabItem.Effect>
                            <DropShadowEffect/>
                        </TabItem.Effect>
                        <Grid 
                            Height                                       =                              '400' 
                            VerticalAlignment                            =                              'Top' >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width                  =                             '0.5*' />
                                <ColumnDefinition Width                  =                             '0.5*' />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                            $( $SecondList.RowDef )
                            </Grid.RowDefinitions>
                            <TextBlock 
                                                    Grid.Row             =                                '0'
                                                    Grid.Column          =                                '0' 
                                                    Grid.ColumnSpan      =                                '2' 
                                                    Margin               =                                '5'
                                                    HorizontalAlignment  =                           'Center'
                                                    TextAlignment        =                           'Center'
                                                    FontSize             =                               '14'
                                                    FontWeight           =                             'Bold' 
                                                    Foreground           =                        '#FF84FF4A' 
                                                    FontFamily           =                         'Segoe UI' >
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth      =                                '5'
                                                        Color            =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                            # - - [ Company Information ]  - - #
                            </TextBlock>
                            $( $SecondList.TextBlock[0..3] )
                            <TextBlock 
                                                    Grid.Row             =                                '5'
                                                    Grid.Column          =                                '0' 
                                                    Grid.ColumnSpan      =                                '2' 
                                                    Margin               =                                '5'
                                                    HorizontalAlignment  =                           'Center'
                                                    TextAlignment        =                           'Center'
                                                    FontSize             =                               '14'
                                                    FontWeight           =                             'Bold' 
                                                    Foreground           =                        '#FF84FF4A' 
                                                    FontFamily           =                         'Segoe UI' >
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth      =                                '5'
                                                        Color            =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                            # - - [ Custom Graphics ]  - - #
                            </TextBlock>
                            $( $SecondList.TextBlock[ 4..5 ] )
                            <TextBlock 
                                                    Grid.Row             =                                '8'
                                                    Grid.Column          =                                '0' 
                                                    Grid.ColumnSpan      =                                '2' 
                                                    Margin               =                                '5'
                                                    HorizontalAlignment  =                           'Center'
                                                    TextAlignment        =                           'Center'
                                                    FontSize             =                               '14'
                                                    FontWeight           =                             'Bold' 
                                                    Foreground           =                        '#FF84FF4A' 
                                                    FontFamily           =                         'Segoe UI' >
                                                <TextBlock.Effect>
                                                    <DropShadowEffect
                                                        ShadowDepth      =                                '5'
                                                        Color            =                        '#FF5B5546' />
                                                </TextBlock.Effect>
                            # - - [ Network Definitions ]  - - #
                            </TextBlock>
                            $( $SecondList.TextBlock[ 6 ] )
                            $( $SecondList.TextBoxes )
                        </Grid>
                    </TabItem>
                </TabControl>
            </StackPanel>
            <StackPanel 
                    Orientation                                          =                       'Horizontal' 
                    FlowDirection                                        =                      'LeftToRight' 
                    VerticalAlignment                                    =                           'Bottom' 
                    HorizontalAlignment                                  =                           'Center' 
                    Height                                               =                               '40' 
                    Margin                                               =                      '150,0,150,0' >
                <Button 
                    Name                                                 =                            'Start'  
                    Content                                              =                            'Start'  
                    HorizontalAlignment                                  =                             'Left'  
                    Height                                               =                               '20' 
                    Width                                                =                              '170' />
                <Button 
                    Name                                                 =                           'Cancel' 
                    Content                                              =                           'Cancel' 
                    HorizontalAlignment                                  =                            'Right' 
                    Height                                               =                               '20' 
                    Width                                                =                              '170' />
            </StackPanel>
        </StackPanel>
    </Window>
"@ #________[ Return to Normal Script Mode ]__________________________________________________________________________________________________________
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____[ Generate the Deployment Share GUI ]_____//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    $GUI = Convert-XAMLtoWindow -Xaml $XAMLRoot -NamedElement @( $Named ; "Start" ; "Cancel" ) -PassThru 

    $GUI.Cancel.Add_Click({ $GUI.DialogResult = $False }) 

    $GUI.Start.Add_Click({ 

    $0 = @( "File System/Drive" ;          "Root Folder" ;    "Network Share Name" ;      "PSDrive Name" ; 
            "Share Description" ;            "Site Name" ; "Application Pool Name" ; "Virtual Directory" ; 
                 "NetBIOS Name" ; "Target/LM Admin User" ;  "Target/LM Admin Pass" ) 

    $1 = $0 | % { "You must enter a $_" } ; $2 = $0 | % { "$_ Missing" } ; $MSG = 0..16 | % { [ Type ] $Message } 

    If     (      $GUI.r0.Text -eq "" ) { ( $MSG[ 0] )::Show( $1[ 0] , $2[ 0] ) } 
    ElseIf (      $GUI.r1.Text -eq "" ) { ( $MSG[ 1] )::Show( $1[ 1] , $2[ 1] ) } 
    ElseIf (      $GUI.r2.Text -eq "" ) { ( $MSG[ 2] )::Show( $1[ 2] , $2[ 2] ) } 
    ElseIf (      $GUI.r3.Text -eq "" ) { ( $MSG[ 3] )::Show( $1[ 3] , $2[ 3] ) } 
    ElseIf (      $GUI.r4.Text -eq "" ) { ( $MSG[ 4] )::Show( $1[ 4] , $2[ 4] ) } 
    ElseIf (    $GUI.iis0.Text -eq "" ) { ( $MSG[ 5] )::Show( $1[ 5] , $2[ 5] ) } 
    ElseIf (    $GUI.iis1.Text -eq "" ) { ( $MSG[ 6] )::Show( $1[ 6] , $2[ 6] ) } 
    ElseIf (    $GUI.iis2.Text -eq "" ) { ( $MSG[ 7] )::Show( $1[ 7] , $2[ 7] ) } 
    ElseIf (     $GUI.dc0.Text -eq "" ) { ( $MSG[ 8] )::Show( $1[ 8] , $2[ 8] ) } 
    ElseIf (     $GUI.dc1.Text -eq "" ) { ( $MSG[ 9] )::Show( $1[ 9] , $2[ 9] ) } 
    ElseIf ( $GUI.dc2.Password -eq "" ) { ( $MSG[10] )::Show( $1[10] , $2[10] ) } 
    ElseIf (      $GUI.p0.Text -eq "" ) { ( $MSG[11] )::Show( $1[11] , $2[11] ) } 
    ElseIf (      $GUI.p1.Text -eq "" ) { ( $MSG[12] )::Show( $1[12] , $2[12] ) } 
    ElseIf (      $GUI.p2.Text -eq "" ) { ( $MSG[13] )::Show( $1[13] , $2[14] ) } 
    ElseIf (      $GUI.p3.Text -eq "" ) { ( $MSG[14] )::Show( $1[14] , $2[14] ) } 
    ElseIf (    $GUI.img0.Text -eq "" ) { ( $MSG[15] )::Show( $1[15] , $2[15] ) } 
    ElseIf (    $GUI.img1.Text -eq "" ) { ( $MSG[16] )::Show( $1[16] , $2[16] ) } 
    ElseIf (      $GUI.n0.Text -eq "" ) { ( $MSG[17] )::Show( $1[17] , $2[17] ) } 
    Else { $GUI.DialogResult = $True }})

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___[ Synchronizes WPF with Window Element ]___//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    $Output = Show-WPFWindow -GUI $GUI 

    If ( $Output -eq $True ) 

    {   $SP = $GUI.dc2.SecurePassword 

        $LMCRED = New-Object -TypeName System.Management.Automation.PSCredential -Args $GUI.dc1.Text , $SP 

    $DSC = [ Ordered ]@{R00_Company     =                                          "$( $GUI.p0.Text )" 
                        R01_UNCRoot     = "\\$( $Env:ComputerName )\$( $GUI.r2.Text.TrimEnd( '$' ) )$" 
                        R02_Hostname    =                                     "$( $Env:ComputerName )" 
                        R03_DC_User     =                                      "$( $DCCred.Username )" 
                        R04_DC_Pass     =                                      "$( $DCCred.Password )" 
                        R05_WWW_Site    =                                          "$( $GUI.p1.Text )" 
                        R06_Phone       =                                          "$( $GUI.p2.Text )" 
                        R07_Hours       =                                          "$( $GUI.p3.Text )" 
                        R08_Logo        =                                        "$( $GUI.img0.Text )" 
                        R09_Background  =                                        "$( $GUI.img1.Text )" 
                        R10_Branch      =                                          "$( $GUI.n0.Text )" 
                        R11_Domain      =                                    "$( $env:USERDNSDOMAIN )" 
                        R12_LM_User     =                                      "$( $LMCRED.Username )" 
                        R13_LM_Pass     =               "$( $LMCRED.GetNetworkCredential().Password )" 
                        R14_Proxy       =                                     "$( $Env:ComputerName )" 
                        R15_NetBIOS     =                                       "$( $Env:UserDomain )" 
                        R16_DSC_Folder  =     "$( $GUI.r0.Text.TrimEnd( '\' ) )\$( ( $GUI.r1.Text ) )" 
                        R17_PSDrive     =                           "$( $GUI.r3.Text.TrimEnd( ':' ) )" 
                        R18_PSDrive_ID  =                                          "$( $GUI.r4.Text )" 
                        R19_BITS_Name   =                                        "$( $GUI.iis0.Text )" 
                        R20_BITS_Pool   =                                        "$( $GUI.iis1.Text )" 
                        R21_BITS_Host   =                                        "$( $GUI.iis2.Text )" 
                        R22_BITS_Root   =                            "https://$( $Env:USERDNSDOMAIN )" } 
                        $NRoot          = "\\$( $Env:ComputerName )\$( $GUI.r2.Text.TrimEnd( '$' ) )$" 
                        $URI            =     "$( $GUI.r0.Text.TrimEnd( '\' ) )\$( ( $GUI.r1.Text ) )" 
                        $SMB            =                          "$( $GUI.r2.Text.TrimEnd( '$' ) )$" 
                        $PSD            =                           "$( $GUI.r3.Text.TrimEnd( ':' ) )" 
                        $TAG            =                                          "$( $GUI.r4.Text )" 
                        $SiteRoot       =                                                  "$( $URI )" 
                        $SiteName       =                                        "$( $GUI.iis0.Text )" 
                        $SitePool       =                                        "$( $GUI.iis1.Text )" 
                        $Vhost          =                                        "$( $GUI.iis2.Text )" 
                        $PName          =                                          "$( $GUI.p0.Text )" 

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____[ Check for all MDT Prerequisites ]______//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\

        $CPU     =                                                            $env:PROCESSOR_ARCHITECTURE
        $SRV     =                                                                      $env:COMPUTERNAME
        $Install =                   ( GP "HKLM:\Software\Policies\Secure Digits Plus LLC" ).'Hybrid-DSC' 
        $MDTFile =                                                         "MicrosoftDeployment`Toolkit_x"
        $MDTURL  =    "https://download.microsoft.com/download/3/3/9/339BE62D-B4B8-4956-B58D-73C4685FC492"
        $ADK     =                                                 "Windows Assessment and Deployment Kit"
        $MDT     =                                                          "Microsoft Deployment Toolkit"
        $7zu     =                                                               "https://www.7-zip.org/a" 

        $Install | ? { ( Test-Path $_ ) -ne $True } | % { NI -Path $_ -ItemType Directory }

        $Path = "" , "\WOW6432Node" | % { "HKLM:\Software$_\Microsoft\Windows\CurrentVersion\Uninstall" } 

        If ( $CPU -eq "x86" ) { $Reg = $Path[   0] | % { GP "$_\*" } ; $MDTFile = "$MDTFile`86.msi" ; $7zip = "7Z1900.exe"     } 
        Else                  { $Reg = $Path[0..1] | % { GP "$_\*" } ; $MDTFile = "$MDTFile`64.msi" ; $7zip = "7z1900-x64.exe" } 

        $List = @{ 

        0 = # - [ Windows ADK ] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \\#
                                                                             "Deployment Kit - Windows 10" , # Regex String                         //#
                                                                                            "10.1.17763.1" , # Minimum Version                      \\#
                                                                                                  "WinADK" , # ID                                   //#
                                                                   "Windows Assessment and Deployment Kit" , # Title                                \\#
                                                                                         "$Install\WinADK" , # Target Path                          //#
                                                                                          "winadk1903.exe" , # Target File                          \\#
                                                         "https://go.microsoft.com/fwlink/?linkid=2086042" , # URL                                  //#
                                                "/quiet /norestart /log $env:temp\win_adk.log /features +"   # Silent Arguments                     \\#
        1 = # - [ Windows PE ]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //#
                                                                                         "Preinstallation" , # Regex String                         \\#
                                                                                            "10.1.17763.1" , # Minimum Version                      //#
                                                                                                   "WinPE" , # ID                                   \\#
                                                                 "Windows ADK Preinstallation Environment" , # Title                                //#
                                                                                          "$Install\WinPE" , # Target Path                          \\#
                                                                                           "winpe1903.exe" , # Target File                          //#
                                                         "https://go.microsoft.com/fwlink/?linkid=2087112" , # URL                                  \\#
                                                "/quiet /norestart /log $env:temp\win_adk.log /features +"   # Silent Arguments                     //#
        2 = # - [ Microsoft Deployment Toolkit ]- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \\#
                                                                                         "Deployment Tool" , # Regex String                         //#
                                                                                           "6.3.8450.0000" , # Minimum Version                      \\#
                                                                                                     "MDT" , # ID                                   //#
                                                                            "Microsoft Deployment Toolkit" , # Title                                \\#
                                                                                            "$Install\MDT" , # Target Path                          //#
                                                                                                "$MDTFile" , # Target File                          \\#
                                                                                        "$MDTURL/$MDTFile" , # URL                                  //#
                                                                                       "/quiet /norestart"   # Silent Arguments                     \\#
        3 = # - [ 7-Zip ] - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //#
                                                                                                   "7-Zip" , # Regex String                         \\#
                                                                                                   "19.00" , # Minimum Version                      //#
                                                                                                   "7-Zip" , # ID                                   \\#
                                                                                 "7-Zip Archiving Utility" , # Title                                //#
                                                                                          "$Install\7-Zip" , # Target Path                          \\#
                                                                                                   "$7zip" , # Target File                          //#
                                                                                              "$7zu/$7zip" , # URL                                  \\#
                                                                                                      "/S" } # Silent Arguments                     //#
        Foreach ( $i in 0..3 ) 

        {   $Item = $Reg | ? { $_.DisplayName -like "*$( $List[$i][0] )*" } | Select DisplayName , DisplayVersion

            If ( ( $Item -ne $Null ) -and ( $Item.DisplayVersion -ge $List[$i][1] ) )

            {   Wrap-Action -Type "Dependency"  -Info "$( $List[$i][2] ) meets minimum requirements" }

            Else 

            {   Wrap-Action -Type "Dependency"  -Info "$( $List[$i][2] ) does not meet minimum requirements" 

                Wrap-Action -Type "Downloading" -Info "$( $List[$i][2] )" 

                Provision-Dependency -ID $List[$i][3] -Path  $List[$i][4] -File $List[$i][5] -URL $List[$i][6] -Args $List[$i][7] 

                If ( $? -eq $True ) { Wrap-Action -Type  "Successful" -Info "[+] $( $List[$i][2] ) Updated"          } 

                Else                { Wrap-Action -Type   "Exception" -Info "[!] $( $List[$i][2] ) Failed to update" 

                                      Read-Host "Press Enter to Exit" ; Exit } } } 

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\______[ Generate the deployment share ]_______//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $MDTID = ( ( GP "HKLM:\SOFTWARE\Microsoft\Deployment 4" ).Install_Dir ).TrimEnd( '\' ) 
        IPMO "$MDTID\Bin\MicrosoftDeploymentToolkit.psd1" 

        $URI | ? { ( Test-Path $_ ) -eq $False } | % { NI $_ -ItemType Directory }
        $URI | ? { ( Test-Path $_ ) -eq  $True } | % { GI $_ ; Wrap-Action "Exception" "[!] Path already exists" }

        $Test = ( GSMBS | ? { $_.Path -eq $URI } -EA 0 ) 
        If ( $Test -eq $Null ) 
        { NSMBS -Name $SMB -Path $URI -Description $TAG -FullAccess Administrators ; $Test = "" }

        $Test = ( GDR   | ? { $_.Name -eq $PSD } -EA 0 ) 
        If ( $Test -eq $Null ) 
        { NDR -Name $PSD -PSProvider MDTProvider -Root $URI -Description $TAG -NetworkPath "$NRoot" | Add-MDTPersistentDrive ; $Test = "" }

        $RegRoot     =                                               'HKLM:\SOFTWARE\Policies' 
        $RegFull     =    "Secure Digits Plus LLC\Hybrid\Desired State Controller\$PName\$PSD" 
        $RegRecurse  =                                                   $RegFull.Split( '\' ) 

        0       | % { If ( ( Test-Path "$RegRoot\$( $RegRecurse[0] )" ) -ne $True ) 
                    { NI -Path $RegRoot -Name $RegRecurse[0] } } 
                      
                $RegPath = "$RegRoot\$( $RegRecurse[0] )" 

        1..4    | % {  If ( ( Test-Path "$RegPath\$( $RegRecurse[$_] )" ) -ne $True ) 
                    { NI -Path $RegPath -Name $RegRecurse[$_] } 
                        $RegPath = "$RegPath\$( $RegRecurse[$_] )" }
                        
                $RegFull = "$RegRoot\$RegFull" 


        If ( ( Test-Path $RegFull ) -eq $True )
        {   
            $RegName    = @( )
            $RegValue   = @( )
            $DSC.Keys   | % {  $RegName += $_ }
            $DSC.Values | % { $RegValue += $_ } 

            0..22       | % { SP -Path "$RegFull" -Name "$( $RegName[$_] )" -Value "$( $RegValue[$_] )" -Force } 
        }

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____[ Select Legacy MDT or PSD-Remaster ]_____//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        Switch ( $host.UI.PromptForChoice( 'PowerShell Deployment' , 'Use Legacy Share or PSD-Remaster ?' , 

        [ System.Management.Automation.Host.ChoiceDescription [] ]@( '&Legacy MDT' , '&PSD-Remaster' ) , [ Int ] 1 ) ) 
        {   
            0   
            {   Wrap-Action "Selected" "[+] MDT [Deployment] Share created" }

            1   
            {   Wrap-Action "Creating" "[+] PowerShell [Deployment/Development] Share"
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_________________[ Scripts ]__________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                $Scripts = "Scripts"

                @( gci "$Install\$Scripts" -Filter "*.ps1" -EA 0 ).Name | % {
                
                    Robocopy "$Install\$Scripts"    "$URI\$Scripts" $_
                    Dir          "$URI\$Scripts\$_"         | Unblock-File 
                    Write-Host -F Cyan "$_ copied successfully" }

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\________________[ Templates ]_________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                $Templates = "Templates"

                @( gci "$Install\$Templates" -EA 0 ).Name | % {

                    Robocopy "$Install\$Templates"    "$URI\$Templates" $_
                    Dir          "$URI\$Templates\$_"       | Unblock-File 
                    Write-Host -F Cyan "$_ copied successfully" }

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_________________[ Modules ]__________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                $Modules = "Tools\Modules"

                "PSDGather", "PSDDeploymentShare", "PSDUtility", "PSDWizard" | % {
                $ModPath  = "$URI\$Modules\$_"

                If ( ( Test-Path "$ModPath" ) -eq $False ) { NI "$ModPath" -ItemType Directory ; Wrap-Action "Created" "[+] Directory $_" }

                    Wrap-Action "Copying" "Module $_ to $ModPath"
                    Robocopy "$Install\$Scripts" "$ModPath" "$_.psm1"
                    Dir                          "$ModPath" | Unblock-File
                    Write-Host -F Cyan "$_ copied successfully" }

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\________________[ SnapIns ]___________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                $BDD = "Microsoft.BDD"

                Wrap-Action "Copying" "[+] $URI\$Modules"
                If ( ( Test-Path "$URI\$Modules\$BDD.PSSnapin" ) -ne $True ) 
                { NI "$URI\$Modules\$BDD.PSSnapIn" -ItemType Directory ; Wrap-Action "Created" "[+] Directory" } 

                $PSSnapIn = ( ( "" , ".config" , "-help.xml" | % { ".dll$_" } ) + 
                ( ".Format" , ".Types" | % { "$_.ps1xml" } ) | % { "PSSnapIn$_" } ) + 
                ( "" , ".config" | % { "Core.dll$_" } ) + "ConfigManager.dll" | % { 

                CP "$MDTDir\Bin\$BDD.$_" "$URI\$Modules\$BDD.PSSnapIn" }
                
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_______________[ Templates ]__________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                Wrap-Action "Copying" "[+] $URI\$Templates" 
                If ( ( Test-Path "$URI\$Templates" ) -eq $False ) { NI "$URI\$Templates" } 

                "Groups" , "Medias" , "OperatingSystems" , "Packages" , "SelectionProfiles" , "TaskSequences" , 
                "Applications" , "Drivers" , "LinkedDeploymentShares" | % { "$_.xsd" } | % { 

                CP "$MDTDir\$Templates\$_" "$URI\$Templates"
                Wrap-Action "Copying" "[+] $URI\$Templates" } 

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_______________[ Zero-Touch ]_________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                Wrap-Action "Sending" "[+] ZTIGather.XML to correct folder" 

                ( gci "$MDTDir\Templates\Distribution\Scripts" "*Gather.xml" -EA 0 ) | % { 
                CP $_.FullName "$URI\$Modules\PSDGather" }

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____________[ Random Stuff ]_________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
 
                $MsgType  = "Logs" , "Dynamics Logs Sub" , "DriverSources" , "DriverPackages" | % { "$_ Folder" }
                $DirType  = "Logs" ,          "Logs\Dyn" , "DriverSources" , "DriverPackages" 

                0..3 | % { Wrap-Action "Creating" "$( $Message[$_] ) in $URI\$( $Path[$_] )" 
                NI -ItemType Directory -Path "$URI\$( $Path[$_] )" -Force } 
            } 
        }
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____________[ Share Permissions ]_____________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        Wrap-Action "Reducing" "[~] Permissions Hardening on $SMB" 

        $Target = "Users" , "Administrators" , "SYSTEM" | % { "$_`:(OI)(CI)(RX)" } 
        $Target | % { $Null = ICACLS $URI /Grant "$_" } 

        GRSMBA -Name $SMB -AccountName "EVERYONE" -AccessRight Change -Force
        RKSMBA -Name $SMB -AccountName "CREATOR OWNER" -Force 

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____________[ SSL/TLS Rules ]________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $SSLTLS   = "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols"
        $Types    = "Client" , "Server" 

        $SK2V      = ( 0..7 | % { 0 } ) + ( 8..9 | % { 1 } )
        $Protocols = @( 2..3 | % { "SSL $_.0" } ) + @( 0..2 | % { "TLS 1.$_" } ) 

        $Protocols | % { 
        
            $Path = "$SSLTLS\$_"
            If ( ( Test-Path $Path ) -ne $True ) 
            { 
                NI "$SSLTLS" "$_" } 
            $Types | % { 
                
                If ( ( Test-Path "$Path\$_" ) -ne $True ) 
                { 
                    NI "$Path" "$_" 
                } 
            } 
        } 

        $Path   = @( $Protocols | % { "$SSLTLS\$_\Client" ; "$SSLTLS\$_\Server" } ) 

        0..( $Path.Count - 1 ) | % { 
            If ( ( gci $Path ) -eq $Null ) 
            { 
                SP -Path $Path[$_] -Name "DisabledByDefault" -Type DWORD -Value 0 
                SP -Path $Path[$_] -Name           "Enabled" -Type DWORD -Value $SK2V[$_] 
            } 
        }
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____________[ Generate SiteRoot ]_____________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $SD     = $ENV:SystemDrive
        $Server = $ENV:SystemDrive

                 ( $Date , $LogPath ) = ( ( Get-Date -UFormat "%m-%d-%Y" ) , "$Home\Desktop\ACL" ) 

        ( $PSP , $SWS , $WSS ) = ( "Machine/Webroot/AppHost" , "System.WebServer" , "Security/Authentication" ) 

                                $Full = "IIS:\Sites\$SiteName\$VHost"
                                 $SAS = "ServerAutoStart"

        $SiteRoot | ? { ( Test-Path $_ ) -eq $False } | % { NI -Path $_ -ItemType Directory -Name $_ }
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\________________[ Services ]__________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        $Web = @(                   "Web-Server" ; # Installs the base 'Web Server functions ... ( $SE = Self Explanatory )                          \\
                                   "DSC-Service" ; # Installs the Desired State Configuration Service                                                //
                                      "FS-SMBBW" ; # Updates the file system to allow for Samba Bandwidth to be differentially allocated             \\
                               "ManagementOData" ; # Creates an ASP.NET Web Service end point that exposes your management data ( Raw Doggin' it )   //
                    "WindowsPowerShellWebAccess" ; # Allows for access to PS API over the web. Falls under $SE                                       \\
                             "WebDAV-Redirector" ; # Allows for Web Server to use reverse/forward proxies, useful for security AND trolling people   //
        @( "BITS" | % {                     "$_" ; # Background Intelligent Transfer Service - Sends/Receives files without being annoying           \\
                                    "$_-IIS-Ext" ; # Extension for BITS to be used in Internet Information Services                                  //
                                "RSAT-$_-Server" } ) ; # Allows for the remote administration of BITS, but in a less cool way than RDP               \\
        @(  "Net" | % { "$_-Framework-45-ASPNET" ; # It's what you need to run any ASP.Net webpage in IIS                                            //
                      "$_-WCF-HTTP-Activation45" } ) ; # It's the Windows Communication Foundation's way of attempting to be important               \\
        @(                         @(  "App-Dev" ; # Application Development Module for IIS/Web                                                      //
                                       "AppInit" ; # Initializes any WPF/C#/ASP applications for instance, MVC, or what have you.                    \\
                                     "Asp-Net45" ; # Another Module for ASP                                                                          //
                                    "Basic-Auth" ; # Allows for authentication that could be considered 'Basic'                                      \\
                                   "Common-Http" ; # A bunch of functions that the 'machine/operating system' converts into 'visual objects'         //
                                "Custom-Logging" ; # Allows for customized logging of whatever happens on your web server                            \\
                                "DAV-Publishing" ; # Publishes WebDAV modules to use/distribute to other machines/systems                            //
                                   "Default-Doc" ; # Falls under $SE                                                                                 \\
                                   "Digest-Auth" ; # More advanced than Basic authentication, but still pretty fkin basic...                         //
                                  "Dir-Browsing" ; # Allows any authenticated user to browse the contents of the web directory                       \\
                                     "Filtering" ; # Mime Types and things of that nature                                                            //
                                        "Health" ; # If you don't understand how $SE this is..? Go outside. Stop trying to program or read scripts.  \\
                    @( "HTTP" | % {  "$_-Errors" ; # Falls under the above entry                                                                     //
                                    "$_-Logging" ; # Also falls under that same entry                                                                \\
                                   "$_-Redirect" ; # Works with WebDAV to keep people on the outside guessing what the hell is happening             //
                                    "$_-Tracing" } ) ; # Like tracert but for 'tracking the IP addresses attempting to access the site'              \\
                                      "Includes" ; # It allows static content to be more dynamic, without messing up the content                     //
                   @( "ISAPI" | % {     "$_-Ext" ; # APPCMD.EXE ... and WebConfig, basically.                                                        \\
                                     "$_-Filter" } ) ; # Allows 'Shell or VBScript to look through the content of WebConfig data. Similar to XML.    //
                                 "Log-Libraries" ; # Pretty $SE if you ask me                                                                        \\
                                      "Metabase" ; # Like a database, but for business or server side analytics... It's like CEIP without the OS     //
                                  "Mgmt-Console" ; # Also rather $SE                                                                                 \\
                                     "Net-Ext45" ; # Yet another extension for ASP.Net to work with your website. Probably for turning C# into html  //
                                   "Performance" ; # $SE continued                                                                                   \\
                               "Request-Monitor" ; # An analytical logbook that specifically logs SSI requests, pretty sure anyway                   //
                                      "Security" ; # What every website should use, but, may not unless you've studied how to use it.                \\
                              "Stat-Compression" ; # Takes statistics and zips em up                                                                 //
                                "Static-Content" ; # Works with Web-Includes                                                                         \\
                                      "Url-Auth" ; # Similar to when you log into Gmail                                                              //
                                     "WebServer" ; # The service that is nearly an exact replica of Apache                                           \\
                                  "Windows-Auth" ) | % { "Web-$_" } ) ; # Allows the WebSite to use NTLM/Kerberos authentication ( Most Secure )     //
        @( "WAS" | % {                      "$_" ; # Series of services that takes HTTP and says "You don't need HTTP. You can use whatever we tell  \\
                              "$_-Process-Model" ; # you to use, cause that's what Windows Process Activation Services means, it's just turning      //
                                "$_-Config-APIs" } ) ) # HTML into XML and vice versa. Like $Magic = @( David | % { $_ Blaine ; $_ Copperfield } )   \\
                                                                                                                                 #____    ____    ___//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____________[ Install Features _______________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        Get-WindowsFeature | ? { $_.Name -in $Web } | Select Name , InstallState | ? {                                       #\__//¯¯\\__//¯¯\\__//¯¯\\
        $_.InstallState -ne "Installed" } | % { Install-WindowsFeature -Name $_.Name }                                           #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___________[ Generate Website ]_______________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        IPMO WebAdministration                                                                                               #\__//¯¯\\__//¯¯\\__//¯¯\\
        Get-Website -Name "Default Web Site" -EA 0 | ? { $_.Name -ne $Null -and $_.State -eq 'Started' } | % {                   #\__//¯¯\\__//¯¯\\__//
        Stop-Website | SP IIS:\Sites\$( $_.Name ) ServerAutoStart False }                                                        #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___________[ Enable Services ]________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        "MRxDAV" , "WebClient" | % {                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\
        Get-Service -ComputerName $Server -Name $_ -EA 0 } | ? { $_.Status -ne "Running" } | % {                                 #\__//¯¯\\__//¯¯\\__//
        Set-Service -ComputerName $Server -StartupType Automatic -EA 4 -Status Start -Name $_ }                                  #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____________[ Create SitePool ]_______________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        New-WebAppPool -Name $SitePool -Force                                                                                #\__//¯¯\\__//¯¯\\__//¯¯\\
        ( "Enable32BitAppOnWin64" , "True" ) ,                                                                                   #\__//¯¯\\__//¯¯\\__//
        ( "ManagedRuntimeVersion" , "v4.0" ) ,                                                                                   #/¯¯\\__//¯¯\\__//¯¯\\
        ( "ManagedPipelineMode" , "Integrated" )  | % {                                                                          #\__//¯¯\\__//¯¯\\__//
        SP -Path "IIS:\AppPools\$SitePool" -Name $_[0] -Value $_[1] }                                                            #/¯¯\\__//¯¯\\__//¯¯\\
        Restart-WebAppPool -Name $SitePool                                                                                       #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\____________[ Start-Website ]_________________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        New-Website -Name $SiteName -ApplicationPool $SitePool -PhysicalPath $SiteRoot -Force                                #\__//¯¯\\__//¯¯\\__//¯¯\\
        Start-Website -Name $SiteName                                                                                            #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\________[ Create Virtual Directory ]__________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        New-WebVirtualDirectory -Site "$SiteName" -Name "$Vhost" -PhysicalPath "$SiteRoot" -Force                            #\__//¯¯\\__//¯¯\\__//¯¯\\
        $SI = "IIS:\Sites\$SiteName\$Vhost"                                                                                      #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___________[ Configure Website ]______________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                             #\__//¯¯\\__//¯¯\\__//¯¯\\
        $MWA = "MACHINE/WEBROOT/APPHOST"                                                                                         #\__//¯¯\\__//¯¯\\__//
        $SWS = "System.WebServer"                                                                                                #/¯¯\\__//¯¯\\__//¯¯\\
        $WSS = "Security/Authentication"                                                                                         #\__//¯¯\\__//¯¯\\__//
        $STC = "StaticContent"                                                                                                   #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        "MACHINE/WEBROOT/APPHOST" , $SiteName , "System.WebServer/webdav/authoring" , "Enabled" , "True" | % {                   #/¯¯\\__//¯¯\\__//¯¯\\
        Set-WebConfigurationProperty -PSPath $_[0] -Location $_[1] -Filter $_[2] -Name $_[3] -Value $_[4] }                      #\__//¯¯\\__//¯¯\\__//
                                                                                                                                 #¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\
        "Set Config '$SiteName/$Vhost' /Section:$SWS/webdav/authoringRules /+[Users='*',Path='*',Access='Read,Source'] /Commit:AppHost" | % {   #\\__//
        $Results = SAPS "$SD\Windows\System32\inetsrv\AppCMD.EXE" -Args $_ -NoNewWindow -PassThru | Out-Null }                                  #//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        $Collection = ( Get-WebConfigurationProperty -PSPath "$MWA" -Filter "$SWS/$STC" -Name "." ).Collection                   #/¯¯\\__//¯¯\\__//¯¯\\
        If ( ! ( $Collection | ? { $_.FileExtension -eq ".*" } ) )                                                               #\__//¯¯\\__//¯¯\\__//
        {                                                                                                                        #/¯¯\\__//¯¯\\__//¯¯\\
            $Mi = Add-WebConfigurationProperty -PSPath $SI -Filter "$SWS/$STC" -Name "." -Value @{                               #\__//¯¯\\__//¯¯\\__//
                FileExtension = '.*' ; MimeType = 'Text/Plain' } }                                                               #/¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_________[ More Configure Website ]___________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        "/$SWS/DirectoryBrowse" , "Enabled" , "IIS:\Sites\$SiteName\$VHost" , $True | % {                                    #\__//¯¯\\__//¯¯\\__//¯¯\\
        Set-WebConfigurationProperty -Filter $_[0] -Name $_[1] -PSPath $_[2] -Value $_[3] }                                      #\__//¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        $TGT = "anonymousAuthentication" , "windowsAuthentication" , +                                                                   #\__//¯¯\\__//
        @( "webdav/authoring" | % { "$_`Rules" ; ( @( "$_/Properties" ) * 2 ) } ) +                                                      #/¯¯\\__//¯¯\\
        @( ( $SRF = "security/RequestFiltering" ) | % { @( "$_/FileExtensions" ) * 2  + @( "$_/Verbs" ) * 2 } )                          #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        $WCP = @{ 0 = "$SiteName/$VHost" , "$SWS/$WSS/$( $TGT[0] )" ,                    "Enabled" ,    "False"                          #\__//¯¯\\__//
                  1 = "$SiteName/$VHost" , "$SWS/$WSS/$( $TGT[1] )" ,                    "Enabled" ,     "True"                          #/¯¯\\__//¯¯\\
                  2 = "$SiteName/"       , "$SWS/$(      $TGT[2] )" ,            "DefaultMimeType" , "Text/XML"                          #\__//¯¯\\__//
                  3 = "$SiteName/$VHost" , "$SWS/$(      $TGT[3] )" , "AllowInfinitePropfindDepth" ,     "True"                          #/¯¯\\__//¯¯\\
                  4 = "$SiteName"        , "$SWS/$(      $TGT[4] )" , "AllowInfinitePropfindDepth" ,     "True"                          #\__//¯¯\\__//
                  5 = "$SiteName/$VHost" , "$SWS/$(      $TGT[5] )" ,              "applyToWebDAV" ,    "False"                          #/¯¯\\__//¯¯\\
                  6 = "$SiteName/"       , "$SWS/$(      $TGT[6] )" ,              "applyToWebDAV" ,    "False"                          #\__//¯¯\\__//
                  7 = "$SiteName/$VHost" , "$SWS/$(      $TGT[7] )" ,              "applyToWebDAV" ,    "False"                          #/¯¯\\__//¯¯\\
                  8 = "$SiteName/"       , "$SWS/$(      $TGT[8] )" ,              "applyToWebDAV" ,    "False" }                        #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        0..8 | % { $i = $WCP[$_]                                                                                                         #\__//¯¯\\__//
        Set-WebConfigurationProperty -PSPath $MWA -Location $i[0] -Filter $i[1] -Name $i[2] -Value $i[3] }                               #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
        $i = Get-IISConfigSection | ? { $_.SectionPath -like "*$SWS/$SRF*" } | Get-IISConfigElement -ChildElementName 'HiddenSegments'   #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
        Set-IISConfigAttributeValue -ConfigElement $i -AttributeName "applyToWebDAV" -AttributeValue $False                              #/¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_________[ Configure Access Control ]_________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
        $AppData = "$SiteRoot"                                                                                           #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        'IIS_IUSRS', 'IUSR', "IIS APPPOOL\$SitePool" | % { 
            $Obj = New-AclObject -SamAccountName $_ -Permission 'ReadAndExecute' -Inheritance 'ContainerInherit' , 'ObjectInherit' ; 
            Add-Acl -Path $SiteRoot -AceObject $Obj } 

        'IIS_IUSRS', "IIS APPPOOL\$SitePool"         | % { 
            $Obj = New-AclObject -SamAccountName $_ -Permission 'Modify' -Inheritance 'ContainerInherit' , 'ObjectInherit' ; 
            Add-Acl -Path $AppData  -AceObject $Obj } 
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_________[ Obtain Remaining Tools ]___________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        $Install =                   ( GP "HKLM:\Software\Policies\Secure Digits Plus LLC" ).'Hybrid-DSC' 
        $7Zip    =                                                        'C:\Program Files\7-Zip\7z.exe' 
        $DISMGUI = 'http://cdn.chuyu.me/Dism++10.1.1000.100_2d2bf466baca088c4b35248f5a7316f4e00cac0b.zip' 

        "$Install\(1)Tools\(1)DISM++" | % { 
            Start-BitsTransfer -Source $DISMGUI -OutFile "$Install\$DISM.zip" 
            Set-Alias SZ $7zip ; SZ x "$_.zip" -o"$_"
            RI "$_.zip" -Force 
        }
    }
        

        Else { Wrap-Action -Type "Exception" -Info "[!] The dialog has failed you sir/ma'am" ; Read-Host "Press Enter to Exit" ; Exit } 
    } 

# ____                                                                            _______________________________________________________#\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Provision-Imaging # Retrieves DSC Info and completely recycles all WIM files and Task Sequences     //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #\_________________________________________________________________________________________________________\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//
       
        Wrap-Action "[ Provision-Imaging ]" "[+] Retrieves DSC Info and Recycles Images and Task Sequences" 

        $LM = $Env:ComputerName , $Env:Processor_Architecture , "$Env:SystemDrive\" ,
        @( $Env:SystemRoot | % { "$_" ; "$_\System32" } ) + , $Env:ProgramData , $Env:ProgramFiles

        
        $Tree = "Resources" , "Tools" , "Images" , "Profiles" , "Certificates" , "Applications" 

        $HKL_ = "HKEY_LOCAL_MACHINE" 
        $HKLM = "HKLM:"
        $SDP  = "Secure Digits Plus LLC"
        $SC   = "Server" , "Client" 

        $DSC  = "SOFTWARE\Policies\$SDP\Hybrid\Desired State Controller" 
        $Base = "$HKLM\$DSC" 


        $Provisionary = @( $Base | ? { ( Test-Path $_ ) -ne $Null } | % { gci $Base -EA 0 } | ? { $_.Name -ne $Null } ) ; $Company = @( ) 

        $Provisionary | ? { $_.Name.Count -gt 1 } | % {  
            
            $Company += $_.PSChildName 
            Wrap-Action "Selection" "[~] Multiple Companies Found"     
            0..( $Company.Count - 1 ) | % { Echo "[$_] $( $Company[$_] )" } 
            
                $SEL  = Read-Host "Select # of listed companies" 
            $Company  = $( $Company[$SEL] ) } 

        $Provisionary | ? { If ( $_.Name.Count -eq 1 ) { $Company = $_.PSChildName } }
        $Provisionary | ? { $_.Name.Count -lt 1 } | % { 
        
                    Wrap-Action "Launching" "[+]Installer"
                    Provision-Installation } 
        
# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____________[ Locate PSDrive ]_______________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
               $Drive = @( gci "$Base\$Company" ) ; $Share = @( ) 
               $Drive | ? { $_.Name.Count -gt 1 } | % {  
               
                Wrap-Action "Selection" "[~] Multiple Drives Found" 
                0..( $Drive.Count - 1 ) | % { Echo "[$_] $( $Drive[$_] )" } 
                 $SEL = Read-Host "Select # of listed drives" 
               $Share = $( $Drive[$SEL] ) } 
               $Drive | ? { $_.Name.Count -eq 1 } | % { $Share = $_.PSChildName } 
               $Drive | ? { $_.Name.Count -lt 1 } | % {  
               
                    Wrap-Action "Launching" "[+] Installer" 
                    Provision-Installation }
                    
               $Drive = "$Base\$Company\$Share"

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_______[ Retrieve Registry Values ]___________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        $R = gp $Drive | % {    $_.R00_Company ;    $_.R01_UNCRoot ;  $_.R02_Hostname ;    $_.R03_DC_User ;    
                                $_.R04_DC_Pass ;   $_.R05_WWW_Site ;     $_.R06_Phone ;      $_.R07_Hours ; 
                                   $_.R08_Logo ; $_.R09_Background ;    $_.R10_Branch ;     $_.R11_Domain ; 
                                $_.R12_LM_User ;    $_.R13_LM_Pass ;     $_.R14_Proxy ;    $_.R15_NetBIOS ; 
                             $_.R16_DSC_Folder ;    $_.R17_PSDrive ;  $_.R18_PSDrive_ID                   } 

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_____[ BITS Check & Variable Allocation ]_____//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        $IIS = gp $Drive | % {   $_.R19_BITS_Name ;  $_.R20_BITS_Pool ; $_.R21_BITS_Host ;  $_.R22_BITS_Root } 

        $Drive = ( $R[17] )

        If ( $LM[0] -eq $R[2] ) { ( $DR , $SRV ) = ( $R[16] , "[ Yes ]" ) } Else { ( $DR , $SRV ) = (  $R[1] ,  "[ No ]" ) }

        $DS = gci $DR "$( $R[0] )" | ? { $_ -eq $Null } 
         
        $DS = "$DR\$( $R[0] )" ; $D = @( gci "$DS" -EA 0 ).FullName ; $L = @( 0..5 | % { "$( $LM[2] + $R[0] )\($_)$( $Tree[$_] )" } )

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___________[ Stage MDT Variables ]____________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//                
        $MDTID = ( ( GP "HKLM:\SOFTWARE\Microsoft\Deployment 4" ).Install_Dir ).TrimEnd( '\' ) 
        IPMO "$MDTID\Bin\MicrosoftDeploymentToolkit.psd1" 

        $Types = "Server" , "Client"
        $MDT = @( "MDTProvider" ; $Drive ; "Administrators" ; 
        @( $Types | % { "$( $Drive ):\Operating Systems\$_" } ) + + 
        @( $Types | % { "$( $Drive ):\Task Sequences\$_" } ) + 
        "$( $R[16] )" ; "$( $R[1].Split('\')[-1] )" ; "$( $R[1] )" ; 
               @( "Boot" ; ( $Types | % { "Operating Systems\$_" } ) + "Scripts" ; "Control" ) | % { "$DR\$_" } ; "$( $R[18] )" )

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\___________[ Stage MDT Variables ]____________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        Wrap-Title -Title "Provisional-Root" ; 
        Wrap-Section -Section "( Domain State Controller @ Source )" 
        $Type = @( "Provisionary" ; "( DSC ) Share" ; "( DSC ) Controller" ; @( $Tree[0..5] ) ) 
        $Info = @( $R[0..2] ; $D[0..5] ) 
        
        Wrap-ItemOut $Type[0] $Info[0] 
        Wrap-ItemIn  $Type[1] $Info[1] 
        Wrap-ItemOut $Type[2] $Info[2] 
        Wrap-ItemIn  $Type[3] $Info[3] 
        Wrap-ItemOut $Type[4] $Info[4] 
        Wrap-ItemIn  $Type[5] $Info[5] 
        Wrap-ItemOut $Type[6] $Info[6] 
        Wrap-ItemIn  $Type[7] $Info[7] 
        Wrap-ItemOut $Type[8] $Info[8] 
        
        Wrap-Section -Section "( Current Machine @ Variables )" ;
        $Type = @( "Server" ; "Hostname" ; "Architecture" ; "System Drive" ; "Windows Root" ; "System32" ; "Program Data" )
        $Info = @( $SRV ; $R[2] ; $LM[1..5] )

        Wrap-ItemOut $Type[0] $Info[0] 
        Wrap-ItemIn  $Type[1] $Info[1] 
        Wrap-ItemOut $Type[2] $Info[2] 
        Wrap-ItemIn  $Type[3] $Info[3] 
        Wrap-ItemOut $Type[4] $Info[4] 
        Wrap-ItemIn  $Type[5] $Info[5] 
        Wrap-ItemOut $Type[6] $Info[6] 

        Wrap-Section -Section "( Provision Index @ Bridge Control )"
        $Type = @( "( DSC ) Target" ; @( $Tree[0..5] ) + "Logo" ; "Background" ) 
        $Info = @( $LM[0] ; $L[0..5] ) 
        
        Wrap-ItemOut $Type[0] $Info[0] 
        Wrap-ItemIn  $Type[1] $Info[1] 
        Wrap-ItemOut $Type[2] $Info[2] 
        Wrap-ItemIn  $Type[3] $Info[3] 
        Wrap-ItemOut $Type[4] $Info[4] 
        Wrap-ItemIn  $Type[5] $Info[5] 
        Wrap-ItemOut $Type[6] $Info[6] 

        Wrap-In
        Wrap-Out
        Wrap-Bot
        Read-Host "Press Enter to Continue" 

# ____                                                ___________________________________________________________________________#/¯¯\\__//¯¯\\__//¯¯\\
#//  \\______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#    \\_________[ Stage MDT Variables ]______________//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                     #\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                         #\__//¯¯\\__//¯¯\\__//¯¯\\__//
        # Begins the image provisioning process
        Wrap-Function -ID "Provision-Images"

        #__________________________
        # Determines the default variables to name images and folders for MDT

        $di = $d[2] 
        $dt = "Server" , "Client" | % { "$dr\Operating Systems\$_" } | ? { ( Test-Path $_ ) -eq $False } | % { NI $_ -ItemType Directory }

        $Date = "$( Get-Date -UFormat "%Y%m%d" )" , "( $( Get-Date -UFormat "%m-%d-%Y" ) MC-SDP )" 
        
        $NA = "Not Detected" 

        #__________________________
        # Filters and stamps DISM information
        $Wim  = @{ 
           
                Name = @(        @( "Server 2016 Datacenter (x64)" ; 
                          @( "Education" , "Home" , "Professional" | % {
                                         "$_ (x64)" ; "$_ (x86)" } | % { 
                                                     "10 $_" } ) ) | % { "Windows $_" } ) 
            
                Tag  = @( "DC2016" ; @( "E" , "H" , "P" | % { "$_`64" ; "$_`86" } | % { "10$_" } ) ) 
            
                Sign = @( 0..6 | % {                "$( $Date[1] ) [ $( $Tag[$_] ) ]" } ) 
                  
               Build = @(    0 | % { "10.0.14393.693" } ; 1..6 | % { "10.0.18362.207" } ) 
                  
               Major = @(    0 | % {           "1607" } ; 1..6 | % {           "1903" } ) 
                  
               Minor = @(    0 | % {          "(693)" } ; 1..6 | % {          "(207)" } ) 
        }

        $Stamp = @( 0..6 | % {    "$( $wim.Build[$_] ) [ $( $wim.Major[$_] ) ]" } ) 

        $DISM  = @( 0..6 )
        ForEach ( $i in 0..6 ) { $DISM[$i] = $Wim | % { $_.Tag[$i] , $_.Name[$i] , $_.Sign[$i] , $Stamp[$i] , $r[0] } } 
        
        #__________________________
        # Checks the DSC folder for backend WIM files that are updated
        Wrap-Action "DISM" "[+] WIM Store" 

        $DI | ? { ( Test-Path $DI ) -ne $True } | % { NI -Path $_ -ItemType Directory }

        $OnDeck    = @( GCI $DI -EA 0 )
        $OnDeckWIM = @( $OnDeck.FullName | % { GCI $_ -Filter "*.wim" -EA 0 } ) 
        
        If ( $OnDeckWIM.Count -eq 0 ) 
        { 
            $Store = @{ Name = $NA ; File = $NA ; Tag = $NA ; Path = $NA ; Date = $NA ; Full = $NA ; Build = $NA }
        } 
        
        Else 
        {  
            $Store   = @( $OnDeckWim | Select @{ Name =  "Name" ; Expression = { Get-WIMName  -IP $_.FullName       } } , 
                                              @{ Name =  "File" ; Expression = {                  $_.Name           } } , 
                                              @{ Name =   "Tag" ; Expression = {                  $_.BaseName       } } , 
                                              @{ Name =  "Path" ; Expression = {             $_.DirectoryName       } } , 
                                              @{ Name =  "Date" ; Expression = {             $_.LastWriteTime       } } , 
                                              @{ Name =  "Full" ; Expression = {                  $_.FullName       } } , 
                                              @{ Name = "Build" ; Expression = { Get-WIMBuild -IP $_.FullName -ID 1 } } ) 
        }

        #__________________________
        # Displays any WIM files that were found
        Wrap-Title -Title "Stored-WIM(S)" 
        0..( $Store.Count - 1 ) | % { 
        Wrap-Section -Section    $Store.Name[$_] 
        Wrap-ItemOut "[+] Path " $Store.Path[$_] 
        Wrap-ItemIn  "[+] File " $Store.File[$_] 
        Wrap-ItemOut "[+] Date " $Store.Date[$_] 
        Wrap-ItemIn  "[+] Build" $Store.Build[$_] 
        Wrap-Out }
        Wrap-Bot 
        Read-Host "Verify list. Press Enter to Continue" 

        #__________________________
        # Checks the default MDT folder for currently served SERVER images
        Wrap-Action "MDT" "[+] Server WIM" 

        $DT[0] | ? { ( Test-Path $_ ) -ne $True } | % { NI -Path $_ -ItemType Directory } 

        $OnBaseS    = @( GCI $DT[0] -EA 0 )
        $OnBaseSWIM = @( $OnBaseS.FullName | % { GCI $_ -Filter "*.wim" -EA 0 } ) 

        If ( $OnBaseSWIM.Count -eq 0 ) 
        {       
            $CServer = [ Ordered ]@{  Name = $NA ; File = $NA ; Tag = $NA ; Path = $NA ; Date = $NA ; Full = $NA ; Build = $NA }
        }
         
        Else 
        {
            $CServer = @( $OnBaseSWIM | Select @{ Name =  "Name" ; Expression = { "Windows Server 2016 Datacenter (x64)" } } , 
                                               @{ Name =  "File" ; Expression = {                    $_.Name             } } , 
                                               @{ Name =   "Tag" ; Expression = {                    $_.BaseName         } } , 
                                               @{ Name =  "Path" ; Expression = {               $_.DirectoryName         } } , 
                                               @{ Name =  "Date" ; Expression = {               $_.LastWriteTime         } } , 
                                               @{ Name =  "Full" ; Expression = {                    $_.FullName         } } , 
                                               @{ Name = "Build" ; Expression = {   Get-WIMBuild -IP $_.FullName -ID 1   } } ) 
        }
        
        #__________________________
        # Checks the default MDT folder for currently served CLIENT images
        Wrap-Action "MDT" "[+] Client WIM"

        $OnBaseClient    = @( GCI $DT[1] -EA 0 )
        $OnBaseClientWIM = @( $OnBaseClient.FullName | % { GCI $_ -Filter "*.wim" -EA 0 } ) 

        If ( $OnBaseClientWIM.Count -eq 0 ) 
        {       $CClient = [ Ordered ]@{  Name = $NA ; File = $NA ; Tag = $NA ; Path = $NA ; Date = $NA ; Full = $NA ; Build = $NA  } } 
        Else {  $CClient = @( $OnBaseClientWim | Select @{ Name =  "Name" ; Expression = { "Windows 10 Home/Education/Pro (x86/64)" } } , 
                                                        @{ Name =  "File" ; Expression = {                    $_.Name               } } , 
                                                        @{ Name =   "Tag" ; Expression = {                    $_.BaseName           } } , 
                                                        @{ Name =  "Path" ; Expression = {               $_.DirectoryName           } } , 
                                                        @{ Name =  "Date" ; Expression = {               $_.LastWriteTime           } } , 
                                                        @{ Name =  "Full" ; Expression = {                    $_.FullName           } } , 
                                                        @{ Name = "Build" ; Expression = {   Get-WIMBuild -IP $_.FullName -ID 1     } } ) } 
        #__________________________
        # Displays the Server and Client Images w/ Build Number and dates
        Wrap-Title  -Title "Current-WIM(S)"
        $Current = $CServer , $CClient 
        $Current | % { 
        Wrap-Section -Section    $_.Name 
        Wrap-ItemOut "[+] Path " $_.Path 
        Wrap-ItemIn  "[+] File " $_.File 
        Wrap-ItemOut "[+] Date " $_.Date 
        Wrap-ItemIn  "[+] Build" $_.Build 
        Wrap-Out } 
        Wrap-Bot
        Read-Host "Press Enter to Continue" 

        #__________________________
        # Collects the information for image files that are about to exist
        Wrap-Action "Transfer / Update" "[+] DISM -> MDT WIM Information" 
                $Update   = [ Ordered ]@{ Name  = ( "Server 2016 Datacenter (x64)" , "10 Home/Education/Pro (x86/64)" | % { "Windows $_" } ) 
                                          File  = ( 0..1 | % {               "$( $Date[0] )_$( $WIM.Major[$_] )_$( $WIM.Minor[$_] ).wim" } ) 
                                          Tag   = ( 0..6 | % {                                                           "$( $Tag[$_] )" } ) 
                                          Path  =                                                                                  "$di" 
                                          Date  =                                                                        "$( $Date[0] )" 
                                          Full  = ( 0..1 | % {           "$di\$( $Date[0] )_$( $WIM.Major[$_] )_$( $WIM.Minor[$_] ).wim" } ) 
                                          Build = ( 0..1 | % {                                                     "$( $WIM.Build[$_] )" } ) } 

        #__________________________
        # Displays the information for image files that are about to exist
        Wrap-Title -Title "Update-WIM(S)"
        0..( $Update.File.Count - 1 ) | % { 
        Wrap-Section -Section    $Update.Name[$_] 
        Wrap-Itemout "[+] Path " $Update.Path 
        Wrap-ItemIn  "[+] File " $Update.File[$_] 
        Wrap-ItemOut "[+] Date " $Update.Date 
        Wrap-ItemIn  "[+] Build" $Update.Build[$_] 
        Wrap-Out } 
        Wrap-Bot
        
        #__________________________
        # Asks the user if they would like to continue
        Read-Host "Press Enter to Continue" 
 
        #__________________________
        # Begins the process of sending the server image
        $Update.Full[0] | ? { ( Test-Path $_ ) -eq $True } | % { RI $_ } 

        0..( $Store.Count - 1 ) | ? { $Store[$_].Name -like "*Serv*" } | % { 
        
            Wrap-Action "Process" $Store[$_].Name 
            Echo "[ Current Image Info ]" , $DISM[$_] 

            Robocopy $Store.Path[0] $di $Store.File[0] ; RI "$di\$( $Store.File[0] )" -NewName $Update.Full[0] ; 
            If ( $? -eq $True ) { Wrap-Action "Successful" "[+] Server Image Updated"     } 
            Else                { Wrap-Action     "Failed" "[!] Server Image not updated" } 

        #__________________________
        # Begins the process of concatenating the client images
        $Update.Full[1] | ? { ( Test-Path $_ ) -eq $True } | % { RI $_ }

        0..( $Store.Count - 1 ) | ? { $Store[$_].Name -like "*10*" } | % { 
        
            Wrap-Action "Process" $Store[$_].Name ; 
            Wrap-Action    "DISM" $Store.Name[$_] 

            Echo "[ Current Image Info ]" , $DISM[$_] 

            Export-WindowsImage -SIP $Store.Full[$_] -SN $Store.Name[$_] -DIP $Update.Full[1] -DN $Store.Name[$_] -VB
            If ( $? -eq $True ) { Wrap-Action "Success"   "[+] Image $( $Store.Name[$_] ) Updated"     } 
            Else                { Wrap-Action "Exception" "[!] Image $( $Store.Name[$_] ) Not Updated" } } 

        Wrap-Function -ID "Recycle-MDT"
        $PSD  = @( $MDT[3..6] ) + @( $MDT[11..12] )
        $Name = @( ( "Server" , "Client" | % { $_ } ) * 3 ) 

        0..3 | ? { 
            
            If ( ( Test-Path $PSD[$_] ) -eq $True ) 
            { 
                Wrap-Action "Path Found" "[+] $( $PSD[$_] )" 
            }

            Else   
            { 
                NI -Path $Path[$_] -Enable "True" -Name $Name[$_] -Comments "$( $Date[1] )" -ItemType "Folder" -VB 
                If ( $? -eq $True )     { Wrap-Action "Path Created" "[+] $( $PSD[$_] )" } 
                Else                    { Wrap-Action "Path Failure" "[-] $( $PSD[$_] )" }
            } 
        } 

        4..5 | % { 
        
            If ( ( Test-Path $PSD[$_] ) -eq $True ) 
            { 
                Wrap-Action "Path Found" "[+] $( $PSD[$_] )"
            }

            Else
            { 
                NI -Path $PSD[$_] -ItemType Directory -Value $PSD[$_] 
                If ( $? -eq $True ) { Wrap-Action "Directory Created" "[+] $( $PSD[$_] )" } 
                Else                { Wrap-Action "Directory Failure" "[!] $( $PSD[$_] )" } 
            } 
        }

        0..5 | % { 
        
            $Name = @( GCI ( $PSD[$_] ) -EA 0 ) 
            If ( $Name.Count -eq 1 )
            { 
                If ( $Name  -ne $null ) 
                { 
                    RI "$( $PSD[$_] )\$( $Name.Name )" -Recurse -VB -EA 0 
                } 
            }
            
            Else
            {  
                ForEach ( $Names in $Name ) 
                { 
                    If ( $Names -ne $Null ) 
                    { 
                        RI "$( $PSD[$_] )\$( $Names.Name )" -Recurse -VB -EA 0 
                    } 
                } 
            } 
            
            If ( $? -eq $True ) { Wrap-Action "Removed"   "[+] $( $PSD[$_] ) Child Items"  } 
            Else                { Wrap-Action "Exception" "[-] $( $PSD[$_] ) Child Items"  }
        } 
 
        0..1 | % {  
        
            If ( ( Test-Path $Update.Full[$_] ) -ne $True ) 
            { 
                Wrap-Action "Image Missing" "[!] $( $Update.Full[$_] )" 
            } 
            
            Else
            { 
                Wrap-Action "Image Found" "[+] $( $Update.Full[$_] )" 
                If ( $_ -eq 0 ) { $Folder = "Server" } 
                Else            { $Folder = "Client" } 
            } 
                    Import-NewOSImage -IP $PSD[$_] -SF $Update.Full[$_] -DF "$Folder\$( $WIM.Build[$_])" 
                    If ( $? -eq $True ) { Wrap-Action "Import Successful" "[+] $( $Update.Full[$_] )" } 
                    Else                { Wrap-Action         "Exception" "[!] Import Failed"         } 
        } 

        $TemplateXML = @( $SC | % { "MDT$_`Mod.xml" } ) 
        $PSDCheck    = @( gci "$dr\Tools\Modules" -Filter "*PSD*" -EA 0 )
        
        $PSDCheck | ? { $_.Count -gt 0 } | % { 
            $TemplateXML = @( $SC | % { "PSD$_`Mod.xml" } ) 
        } 
        
        $ServerXML = $TemplateXML[0]
        $ClientXML = $TemplateXML[1] } 
                    
        $Server    = @{ List   = @( GCI $PSD[0] -EA 0 )
                        Temp   = @( "$di\Control\$ServerXML" ) } 
        
        $Client    = @{ List   = @( GCI $PSD[1] -EA 0 ) 
                        Temp   = @( "$di\Control\$ClientXML" ) } 
        
        0..6 | % { 
            
            If ( $_ -eq 0 ) 
            { 
                $XML  = @( GC $Server.Temp ) 
                $PSP  = $MDT[5]
                $SIP  = "$( $MDT[3] )\$( $Server.List.Name )" ; 
                $GUID = $Server.List.GUID 
            }
              
            Else 
            { 
                $XML  = @( GC $Client.Temp ) 
                $PSP  = $MDT[6]
                $SIP  = "$( $MDT[4] )\$( $Client.List.Name[ ( $_ - 1 ) ] )" 
                $GUID = $Client.List.GUID[ ( $_ - 1 ) ] 
            }

        $XMLArray = @() 
        0..$XML.Count | % { If ( $XML[$_] -like "*OSGUID*" ) { $XMLArray += $_ } } 

        ForEach ( $i in $XMLArray ) { $XML[$i] = $XML[$i].Split('{')[0] + $GUID + $XML[$i].Split('}')[1] } 

        $XML_Path  = "$( $Store.Path[$_] )\$( $Tag[$_] ).xml"
        
        SC -Path $XML_Path -Value $XML -Force 

        Wrap-Action "Import-NewTask" "[+] $( $DISM[$_][0] ) / $( $DISM[$_][1] )" 
        
        Import-NewTask -PSP $PSP -Formal $DISM[$_][1] -XML $XML_Path -Info $NT.Info $Date[1] -ID $DISM[$_][0] -Ver $Date[0] -SIP $SIP ` 
            -TSName $DISM[$_][1] -Org $R[0] -WWW $R[5] -LMCred $lmcred.GetNetworkCredential().Password } 

        Wrap-Action "[ MDT ]" "Updating PSDrive $( $MDT[1] ) Properties" 

        $Array  = @( ".GenerateLiteTouchISO" ; @( "WIMDescription" , "ISOName" | % { ".LiteTouch$_" } ) ; ".BackgroundFile" ) 
        $DSC    = @( "$( $MDT[1] ):" ; @( $Array | % { "Boot.x64$_" } ) + @( $Array | % { "Boot.x86$_" } ) ) 
        $Name   = @( "Comments" , "MonitorHost" + $DSC ) 
        $Value  = @( $Date[1] ; $r[2] ; 
        64 , 86 | % { "True" ; @( " (x$_)" | % { "$_" , "$_.iso" } | % { "$( $r[0] )$($_)" } ) + "$( $d[0] )\$( $r[9] )" } )
        
        0..$Name.Count | % { 
    
            SP -Path $DSC[0] -Name $Name[$_] -Value $Value[$_]
            Wrap-Action "Drive Property" "$( $Name[$_] ) set to . . ."
            Echo $Value[$_]     
        } 
        
        If ( $? -eq $True ) 
        { 
            Wrap-Action "[ MDT ]" "PSDrive $( $MDT[1] ) Properties updated Successfully"     
        }
         
        Else 
        { 
            Wrap-Action "[ MDT ]" "PSDrive $( $MDT[1] ) Properties failed to update" 
            Break 
        } 

        $BootStrap = @{ 

                        Settings = @{   Priority           = "Default" } 
                        Default  = @{   DeployRoot         = "\\$( $r[2] )" 
                                        UserID             = "$( $r[3] )" 
                                        UserPassword       = "$( $dccred.GetNetworkCredential().Password )" 
                                        UserDomain         = "$( $r[15] )" 
                                        SkipBDDWelcome     = "YES" } 
        }

        Export-Ini -Path $( $MDT[14] ) -Name "Bootstrap.ini" -Value $Bootstrap -Encoding UTF8 -Force -UTF8NoBOM

        $CustomSettings = @{

                        Settings   = @{ Priority           = "Default" 
                                        Properties         = "MyCustomProperty" } 
                        Default    = @{ _SMSTSOrgName      = "$( $r[0] )" 
                                        OSInstall          = "Y" 
                                        SkipCapture        = "NO" 
                                        SkipAdminPassword  = "YES" 
                                        SkipProductKey     = "YES" 
                                        SkipComputerBackup = "NO" 
                                        SkipBitLocker      = "YES" 
                                        KeyboardLocale     = "en-US" 
                                        TimeZoneName       = "$( ( Get-TimeZone ).ID )" 
                                        EventService       = "http://$( $r[2] ):9800" }
        }

        Export-Ini -Path $( $MDT[14] ) -Name "CustomSettings.ini" -Value $CustomSettings -Encoding UTF8 -Force -UTF8NoBOM

        $Graphics = "*computer.png" , "*header-image.png" | % { ( gci "$DI\Control" -Filter $_ -EA 0 ) } 
        $Graphics | ? { $_.Exists } | % { CP $_.FullName "$( $MDT[13] )\$( $_.Name )" }

$Script = @"
#_____________________________________________________________________________________________________________________________________________________
#//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//  [ Secure Digits Plus LLC | Hybrid | Desired State Controller ]  \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯     __________________________________________________________     ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯ -=-=-=-=-=-=-=[ Dynamically Engineered Digital Security ]-=-=-=-=-=-=--=-= ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯                                           ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   Application Development | Virtualization | Network and Hardware Magistration   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   https://www.securedigitsplus.com | Server-Client | Seedling-Spawning Script    \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\___¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ___//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   [ Provisional Author : Michael C Cook Sr. | "The Buck Stops Here" ]    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//   ____    ____    ____    ____    ____    ____    ____    ____    ____   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\
#\\  [ Install-Hybrid ] @: Installs the base folder and application prerequisites for initializing a Hybrid Desired State Controller Server  //  \\__//
#//__________________________________________________________________________________________________________________________________________\\__//  \\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#¯      Declare Namespaces    ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#       ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯        ¯¯¯¯    ¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Using Namespace System.Security.Principal   #\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
# ____                                           //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#//  \\                                          \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\__//  \\
    Function Elevate-Script # If the user is an administrator, and the window is not, this will elevate the window. Non-Admins get booted here.  \\__//
    { #__________________________________________________________________________________________________________________________________________//  \\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        ( GWMI Win32_ComputerSystem ) | % { If ( `$_.PartOfDomain -eq `$True ) { `$DC = 1 } Else { `$DC = 0 } `$Gate = 0 ; `$Key = 0 }     #\__//¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
        If ( `$DC = 1 ) { IPMO ActiveDirectory ;                                                                                          #/¯¯\\__//¯¯\\
                         `$I = @( Get-ADPrincipalGroupMembership -Identity `$Env:Username | % { `$_.Name -like "*Admin*" } )                #\__//¯¯\\__//
                         If ( `$I -contains `$True ) { `$Gate = 1 } }                                                                       #/¯¯\\__//¯¯\\
                                                                                                                                         #\__//¯¯\\__//
        If ( `$DC = 0 ) { `$I = ( [ WindowsPrincipal ] [ WindowsIdentity ]::GetCurrent() ).IsInRole( "Administrator" )                     #/¯¯\\__//¯¯\\
                         If ( `$I -eq `$True )       { `$Gate = 1 } Else {  `$Key = 1 } }                                                    #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        If ( ( `$Key = 1 ) -and ( [ Int ] ( gcim Win32_OperatingSystem ).BuildNumber -ge 6000 ) )                                         #\__//¯¯\\__//
        {                                                                                                                                #/¯¯\\__//¯¯\\
            Echo "Attempting [~] Script Elevation" ;                                                                                     #\__//¯¯\\__//
            `$MyInvocation | % { SAPS -FilePath PowerShell.exe -Verb Runas -Args "-File `$( `$_.MyCommand.Path ) `$( `$_.UnboundArguments )" }#/¯¯\\__//¯¯\\
                         If ( `$? -eq `$True ) { `$Gate = 1 } Else { `$Gate = 0 } }                                                          #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        If ( `$Gate = 1 ) { Echo "Access [+] Granted" ; Set-ExecutionPolicy Bypass -Scope CurrentUser -Force -VB }                        #\__//¯¯\\__//
                                                                                                                                         #/¯¯\\__//¯¯\\
        Else { "Access [!] Denied" ; Sleep -S 2 ; Read-Host "Press Enter to Exit" ; Exit } }                                             #\__//¯¯\\__//
# ____                                                                                                                        ___________#/¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Bridge-Script # Ties this commandlet into Write-Output for styling strings  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//
    { #__________________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//
        CMDKEY /add:$( $r[2] ) /user:$( $r[3] ) /pass:`$( `$dccred.GetNetworkCredential().Password )                                   #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        `$Type = "Client"                                                                                                             #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        ( gcim Win32_OperatingSystem ).Caption | ? { `$_ -like "*Server*" } | % { `$Type = "Server" }                                  #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        CP -Path "$( $r[1] )\$( $r[0] )\(0)Resources\`$Hybrid`$Type.ps1" -Destination "`$home\Desktop" -Force                           #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        SC -Path "`$home\Desktop\RootVar.ini" -Value (                                                                                #\__//¯¯\\__//¯¯\\
        "$(  $r[0] )" ,                                                                                                              #/¯¯\\__//¯¯\\__//
        "$(  $r[1] )" ,                                                                                                              #\__//¯¯\\__//¯¯\\
        "$(  $r[2] )" ,                                                                                                              #/¯¯\\__//¯¯\\__//
        "$(  $r[3] )" ,                                                                                                              #\__//¯¯\\__//¯¯\\
        "`$( `$dccred.GetNetworkCredential().Password )" ,                                                                             #/¯¯\\__//¯¯\\__//
        "$(  $r[5] )" ,                                                                                                              #\__//¯¯\\__//¯¯\\
        "$(  $r[6] )" ,                                                                                                              #/¯¯\\__//¯¯\\__//
        "$(  $r[7] )" ,                                                                                                              #\__//¯¯\\__//¯¯\\
        "$(  $r[8] )" ,                                                                                                              #/¯¯\\__//¯¯\\__//
        "$(  $r[9] )" ,                                                                                                              #\__//¯¯\\__//¯¯\\
        "$( $r[10] )" ,                                                                                                              #/¯¯\\__//¯¯\\__//
        "$( $r[11] )" ,                                                                                                              #\__//¯¯\\__//¯¯\\
        "$( $r[12] )" ,                                                                                                              #/¯¯\\__//¯¯\\__//
        "$( $lmcred.GetNetworkCredential().Password )" ,                                                                             #\__//¯¯\\__//¯¯\\
        "$( $r[14] )" ,                                                                                                              #/¯¯\\__//¯¯\\__//
        "$( $r[15] )" ,                                                                                                              #\__//¯¯\\__//¯¯\\
        "$( $r[16] )" )                                                                                                              #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        "`$home\Desktop\`$Hybrid.ps1" | ? { ( Test-Path `$_ ) -eq `$True } | % { RI `$_ -Force }                                          #/¯¯\\__//¯¯\\__//
        `$SEP = "Set-ExecutionPolicy Bypass -Scope CurrentUser -Force"                                                                #\__//¯¯\\__//¯¯\\
        SAPS -FilePath PowerShell.EXE -Verb RunAs -Args "-File '`$Home\Desktop\`$Hybrid`$Type.ps1' `$SEP" }                              #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
# ____                                                                                                                        _______#\__//¯¯\\__//¯¯\\
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Bridge-Script # Ties this commandlet into Write-Output for styling strings  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//  \\__//
    { #__________________________________________________________________________________//__\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\
                                                                                                                                 #\__//¯¯\\__//¯¯\\__//  
        [ CmdLetBinding () ][ OutputType ( [ String ] ) ] Param (                                                                    #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
            [ Parameter ( ValueFromPipeLine = `$True , ValueFromPipelineByPropertyName = `$True ) ]                                    #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
                [ Alias ( 'PSCredential' ) ] [ ValidateNotNull () ][ System.Management.Automation.PSCredential ]                     #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
                [ System.Management.Automation.Credential () ] `$Credentials )                                                        #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        ( `$Domain , `$Root , `$Username , `$Password ) = @( 0..3 | % { `$Null } )                                                        #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        If ( `$Credentials -eq `$null ) {                                                                                              #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
                Try   { `$Credentials = Get-Credential "domain\`$env:username" -EA 4 }                                                 #\__//¯¯\\__//¯¯\\
                Catch { `$ErrorMsg    = `$_.Exception.Message                                                                          #/¯¯\\__//¯¯\\__//
                        Echo "Failure [!] Account Validation"                                                                        #\__//¯¯\\__//¯¯\\
                        Read-Host "Press Enter to Exit"                                                                              #/¯¯\\__//¯¯\\__//
                        Exit }                                                                                                       #\__//¯¯\\__//¯¯\\
        }                                                                                                                            #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        Try       { `$Domain   = New-Object System.DirectoryServices.DirectoryEntry(                                                  #/¯¯\\__//¯¯\\__//
                                      "LDAP://`$( ( [ ADSI ]'').distinguishedName )" ,                                                #\__//¯¯\\__//¯¯\\
                                                       "`$( `$Credentials.Username )" ,                                                #/¯¯\\__//¯¯\\__//
                                "`$( `$Credentials.GetNetworkCredential().Password )" ) }                                              #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        Catch     { `$_.Exception.Message ; Continue }                                                                                #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        If ( ! `$Domain ) {   Echo "Exception [!] Domain does not exist"                                                              #\__//¯¯\\__//¯¯\\
                             Echo "Install [!] Active Directory Domain Services"                                                     #/¯¯\\__//¯¯\\__//
                             Read-Host "Press Enter to Exit" ; Exit                                                                  #\__//¯¯\\__//¯¯\\
        }                                                                                                                            #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        Else {  If ( `$Domain.Name -ne `$Null ) { Return "Authenticated" ; Elevate-Script }                                            #/¯¯\\__//¯¯\\__//
                Else { Echo "Authentication [!] Failure" ; Sleep -S 2 }                                                              #\__//¯¯\\__//¯¯\\
        }                                                                                                                            #/¯¯\\__//¯¯\\__//
    }                                                                                                                                #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
    [ System.Windows.MessageBox ]::Show( "Enter Service Account Credentials to Continue" )                                           #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
    `$DCCRED = Get-Credential                                                                                                         #\__//¯¯\\__//¯¯\\
    If ( ( `$DCCRED | Test-Credential ) -ne "Authenticated" ) { Exit }                                                                #/¯¯\\__//¯¯\\__//
    Else { Elevate-Script }                                                                                                          #\__//¯¯\\__//¯¯\\
# ____                                                                            ___________________________________________________#/¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
"@


        SC -Path "$( $MDT[13] )\Initialize-Hybrid.ps1" -Value $Script -Force

        $Drive = $DSC[0] 
        Switch( $host.UI.PromptForChoice( 'Recycle-MDT' , 'Select MDT Update Method' , 
        [ System.Management.Automation.Host.ChoiceDescription[] ]@( '&Full' , '&Fast' , '&Compress' ) , 
        [ Int ] 0 )  ) {    0 { Update-MDTDeploymentShare -Path $Drive    -Force -VB } 
                            1 { Update-MDTDeploymentShare -Path $Drive           -VB } 
                            2 { Update-MDTDeploymentShare -Path $Drive -Compress -VB } }

        $OEM       = "$( $R[0].Replace( ' ' , '_' ) )"
        
        $Types = 64 , 86
        GCI $MDT[10] -Filter "*$( $OEM )*" -EA 0 | RI -Force 
        $Types | % { Remove-WDSBootImage -Architecture "x$_" -ImageName "$( $R[0] ) (x$_)" -EA 0 -VB } 

        GCI $MDT[10] -Filter "*LiteTouch*" -EA 0 | RNI -NewName { $_.Name.Replace( "LiteTouchPE" , "$OEM" ) } 
        $Boot  = $Types | % { GCI $MDT[10] -Filter "*_$_.wim" -EA 0 }
        
        0..1 | % { Import-WDSBootImage -Path $Boot[$_].FullName -NewDescription "$( $R[0] +' ('+ $Types[$_] +')')" -SkipVerify -VB } 
        Wrap-Function -ID "Restart-WDS"
        
        Restart-Service -Name WDSServer
        If ( $? -eq $True ) { Wrap-Action -Type "WDS Image" -Info "[+] Successfully updated!" ; Display-Foot ; Exit } 
        Else                { Wrap-Action -Type "WDS Image" -Info "[-] Update failed"         ; Display-Foot ; Exit } 
    }

# ____                                                                            _______________________________________________________#\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Make-Decision # Checks for an existing installation path, and selects the corresponding workflow    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    { #\_________________________________________________________________________________________________________\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                             #\__//¯¯\\__//¯¯\\__//¯¯\\
        $BasePath = "HKLM:\Software\Policies\Secure Digits Plus LLC"                                                             #\__//¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        If ( ( GP $BasePath -ea 0 ) -ne $Null )                                                                                      #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
        { ( $Base , $InstallDate ) = ( GP $BasePath -EA 0 | % { $_.'Hybrid-DSC' , $_."Installation Date" } )                         #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
            If ( ( ( $Base , $InstallDate ) -ne $Null ) -and ( Test-Path $Base ) -eq $True ) { Switch( $Host.UI.PromptForChoice(     #/¯¯\\__//¯¯\\__//
"Change / Refresh / Remove" ,                                                                                                        #\__//__\\__//__\\
" An existing installation was detected        
                                               
    [ Hybrid-DSC Location ]                    
    = = = = = = = = = = =                      
        $Base                                      
                                               
    [ Installation Date ]                      
    = = = = = = = = =                          
        $InstallDate                               
                                            " ,
                [ System.Management.Automation.Host.ChoiceDescription [] ]@( '&Change' , '&Refresh' , '&Remove' ) , [ Int ] 0 ) )    #\__//¯¯\\__//¯¯\\
                {                                                                                                                    #/¯¯\\__//¯¯\\__//
                    0 { Wrap-Action "Change" "[+] Selected"                                                                          #\__//¯¯\\__//¯¯\\
                        RI $BasePath ; RI $Base -Recurse -Force                                                                      #/¯¯\\__//¯¯\\__//
                        ( $Base , $BasePath , $InstallDate ) = $Null                                                                 #\__//¯¯\\__//¯¯\\
                        Install-Hybrid ; Populate-DSCRoot ; Review-Applications ; Download-Applications                              #/¯¯\\__//¯¯\\__//
                        Display-Foot ; Wrap-Action "Installation" "[+] Complete"                                                     #\__//¯¯\\__//¯¯\\
                        Read-Host "Press Enter to Exit" ; Exit }                                                                     #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
                    1 { Wrap-Action "Refresh" "[+] Selected"                                                                         #/¯¯\\__//¯¯\\__//
                        RI $Base -Recurse -Force ; NI $Base -ItemType Directory                                                      #\__//¯¯\\__//¯¯\\
                        Populate-DSCRoot ; Review-Applications ; Download-Applications                                               #/¯¯\\__//¯¯\\__//
                        Display-Foot ; Wrap-Action "Installation" "[+] Complete"                                                     #\__//¯¯\\__//¯¯\\
                        Read-Host "Press Enter to Exit" ; Exit }                                                                     #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
                    2 { Wrap-Action "Remove" "[+] Selected"                                                                          #/¯¯\\__//¯¯\\__//
                        RI $BasePath ; RI $Base -Recurse -Force                                                                      #\__//¯¯\\__//¯¯\\
                        Display-Foot ; Wrap-Action "Uninstallation" "[+] Complete"                                                   #/¯¯\\__//¯¯\\__//
                        Read-Host "Press Enter to Exit" ; Exit }                                                                     #\__//¯¯\\__//¯¯\\
                }                                                                                                                    #/¯¯\\__//¯¯\\__//
            }                                                                                                                        #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
            If ( $Base -ne $Null -and ( ( Test-Path $Base -EA 0 ) -eq $True ) -and ( ( GCI $Base ).Count -eq 0 ) )                   #\__//¯¯\\__//¯¯\\
            {                                                                                                                        #/¯¯\\__//¯¯\\__//
                Populate-DSCRoot ; Review-Applications ; Download-Applications ; Display-Foot ;                                      #\__//¯¯\\__//¯¯\\
                Read-Host "[+] Installation Complete" ; Exit }                                                                       #/¯¯\\__//¯¯\\__//
        }                                                                                                                            #\__//¯¯\\__//¯¯\\
                                                                                                                                     #/¯¯\\__//¯¯\\__//
        Else {  Install-Hybrid ; Populate-DSCRoot ; Review-Applications ; Download-Applications ; Display-Foot                       #\__//¯¯\\__//¯¯\\
                Read-Host "[+] Installation Complete" ; Exit } }                                                                     #/¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
# ____                                                                            ___________________________________________________#/¯¯\\__//¯¯\\__//
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
        Elevate-Script ; Display-TrueColors ; Make-Decision     #//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\______________________________________________________________\\__//__\\__//__\\__//__\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//  [ Secure Digits Plus LLC | Hybrid | Desired State Controller ]  \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯     __________________________________________________________     ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯ -=-=-=-=-=-=-=[ Dynamically Engineered Digital Security ]-=-=-=-=-=-=--=-= ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯                                           ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   Application Development | Virtualization | Network and Hardware Magistration   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   https://www.securedigitsplus.com | Server-Client | Seedling-Spawning Script    \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\___¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ___//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   [ Provisional Author : Michael C Cook Sr. | "The Buck Stops Here" ]    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//   ____    ____    ____    ____    ____    ____    ____    ____    ____   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\
#¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
