#_____________________________________________________________________________________________________________________________________________________
#//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\--//--\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//  [ Secure Digits Plus LLC | Hybrid | Desired State Controller ]  \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯     __________________________________________________________     ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯ -=-=-=-=-=-=-=[ Dynamically Engineered Digital Security ]-=-=-=-=-=-=--=-= ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯                                           ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   Application Development | Virtualization | Network and Hardware Magistration   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//   https://www.securedigitsplus.com | Server-Client | Seedling-Spawning Script    \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\___¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ___//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\   [ Provisional Author : Michael C Cook Sr. | "The Buck Stops Here" ]    //¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//   ____    ____    ____    ____    ____    ____    ____    ____    ____   \\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
#//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\
#\\  [ Provision-DomainController ] @: Orchestrates the process of provisioning server prerequisites in order to install Hybrid-DSC          //  \\__//
#//__________________________________________________________________________________________________________________________________________\\__//¯¯\\
#\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
                                                                                                                                     #\__//¯¯\\__//¯¯\\
Using Namespace System.Security.Principal
Using Namespace System.Management.Automation
Using Namespace System.DirectoryServices

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Action # Ties this commandlet into Write-Output for styling strings                                    #¯¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdletBinding () ] Param (
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ][ String ] $Type ,
            [ Parameter ( Position = 1 , Mandatory , ValueFromPipeline = $True ) ][ String ] $Info )

            $fs = " // " ; $bs = " \\ " ; $x = " " * ( 25 - $Type.Length ) ; $y = " " * ( 80 - $Info.Length )

            Echo @( "" ; ( $fs + ( "¯-" * 54 ) + $bs ) ;
            "$( $bs + $x + $Type ) : $( $Info + $y + $fs )" ;
            ( $fs + ( "-_" * 54 ) + $bs ) ; "" ) 
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Title # Ties this commandlet into Write-Output for styling strings                                     #¯¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding () ] Param ( 
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ][ String ] $Title )

            $fs = " // " ; $bs = " \\ " ; $th = "[ $Title ]" ; $y  = $th.length ; $x  = 108 - $y
            If ( $x % 4 -ge 2 ) { $x  = $x - 2 ; $y  = $th.replace( "[" , " [ " ) ; $th = $y }
            If ( $x % 2 -ge 1 ) { $x  = $x - 1 ; $y  = $th.replace( "]" , " ]" )  ; $th = $y ; $z  = 0 }
            If ( $z = 1 ) { $z = " -" } Else { $z = "- " } $y = $z * ( $x / 4 ) ; $x = "- " * ( $x / 4 )
            Echo @( "" ; ( $fs + ( "¯-" * 54 ) + $bs )
                    "$( $bs + $x + $th + $y + $fs )" )
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Array # Ties this commandlet into Write-Output for styling a string array                              #¯¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdletBinding () ] Param (
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ] [ Array ] $Block )

                $fs = " // " ; $bs = " \\ "
                Echo @( " " * 112 ; $fs + "¯-" * 54 + $bs )
                Echo $Block
                Echo @( $fs + "-_" * 54 + $bs ; " " * 112 ) 
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Section                                                                                                #¯¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding () ] Param (
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ] [ String ] $Section , [ Switch ] $In , [ Switch ] $Out )

            If ( $In )  { $fs = " // " ; $bs = " \\ " } ; If ( $Out ) { $bs = " // " ; $fs = " \\ " }
            $z = $Section ; $x = " " * 10 ; $y = " " * ( 98 - $z.Length )
            ( $fs + "  " * 54 + $bs )
            Echo "$( $bs + $x + $z + $y + $fs )" 
            ( $fs + "  " * 54 + $bs )
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Item                                                                                                   #¯¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding () ] Param (
            [ Parameter ( Position = 0 , Mandatory , ValueFromPipeline = $True ) ] [ String ] $Type ,
            [ Parameter ( Position = 1 , Mandatory , ValueFromPipeline = $True ) ] [ String ] $Info , [ Switch ] $In , [ Switch ] $Out )
 
            If ( $In )  { $fs = " // " ; $bs = " \\ " } ; If ( $Out ) { $bs = " // " ; $fs = " \\ " }
            $x = " " * ( 25 - $Type.Length ) ; $y = " " * ( 80 - $Info.Length )
            Echo "$( $bs + $x + $Type ) : $( $Info + $y + $fs )" 
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Space                                                                                                  #¯¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding () ] Param ( [ Switch ] $In , [ Switch ] $Out )

            If ( $In  ) { $fs = " // " ; $bs = " \\ " } ; If ( $Out ) { $bs = " // " ; $fs = " \\ " }
            Echo @( $bs + ( " " * 108 ) + $fs )
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Foot                                                                                                    #¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        $fs = " // " ; $bs = " \\ " ; Echo @( ( $fs + ( "¯-" * 54 ) + $bs ) ; "" )
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Text                                                                                                    #¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding ( ) ] Param ( [ Switch ] $Top , [ Switch ] $Bot )
    
        $S = " // " , " \\ " ; $F = "/¯¯\" , "\__/" ; $R = $F[0..1] , $F[1..0] | % { $_ * 13 -join '' } ; 
        $L = "_" , "¯" , " " | % { $_ * 108 } ; $R = " // $( $R[0] + $F[0] ) \\ " , " \\ $( $R[1] + $F[1] ) // "
        If ( $Top ) { $X = "  __$( $L[0] )__  " , $R , " //¯$( $L[1] )¯\\ " , " \\ $( $L[2] ) // " }
        If ( $Bot ) { $X = " // $( $L[2] ) \\ " , " \\_$( $L[0] )_// " , $R , "  ¯¯$( $L[1] )¯¯  " }
        Return $X
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Wrap-Box                                                                                                     #¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding ( ) ] Param ( 
            [ Parameter ( Position = 0 , Mandatory ) ] [ Alias ( "K" ) ] [ String [] ]   $Keys ,
            [ Parameter ( Position = 1 , Mandatory ) ] [ Alias ( "V" ) ] [ String [] ] $Values ,
            [ Parameter ( Position = 2 , Mandatory ) ] [ Alias ( "F" ) ] [ String    ]   $Font ,
            [ Parameter ( Position = 3 , Mandatory ) ] [ Alias ( "B" ) ] [ String    ]   $Back ,
            [ Parameter ( Position = 4 ) ]             [ Alias ( "L" ) ] [ String    ]    $Log ) 

        $K , $V = $Keys , $Values

        $Write = @( )

        $Write += Wrap-Text -Top

        If ( $K.Count -gt 1 )
        {
            ForEach ( $i in 0..( $k.count - 1 ) ) 
            { 
                If ( $i % 2 -ge 1 ) { $fs , $bs = " \\ " , " // " } If ( $i % 2 -eq 0 ) { $fs , $bs = " // " , " \\ " } 
                $Left  = "$fs$( " " * ( 53 - $k[$i].ToString().Length ) )$( $k[$i] ):"
                $Right = " $( $v[$i] )$( " " * ( 53 - $v[$i].ToString().Length ) )$bs"
                $Write += "$Left$Right"
            }
        }

        ( $i | Select -Last 1 ) | ? { If ( $_ % 2 -gt 0 ) { $Write += " // $( " " * 108 ) \\ " } }
        
        $Write += Wrap-Text -Bot

        If ( $Log -ne $Null ) { Echo $Write | % { Tee -I $_ $Log -A } | Out-Null }

        $Write | % { Write-Host $_ -F $Font -B $Back }
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Display-TrueColors                                                                                           #¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        "  ________________________________________________________________________________________________________________  " ,
        " // /¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__/ // " ,
        " // /¯¯\\   ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯   //¯¯\ \\ " ,
        " \\ \__//    [ The beginning of the fight against Technological Tyranny and Cyber Criminal Activities ]    \\__/ // " ,
        " // /¯¯\\    __________________________________________________________________________________________    //¯¯\ \\ " ,
        " \\ \__//    \\                                     ]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //   *     *     *     *     *     *   ]________________________________________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\      *     *     *     *     *      ]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //   *     *     *     *     *     *   ]___[ Dynamically Engineered Digital Security ]__\\    //¯¯\ \\ " ,
        " \\ \__//    \\      *     *     *     *     *      ]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //   *     *     *     *     *     *   ]________________________________________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\      *     *     *     *     *      ]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //   *     *     *     *     *     *   ]__[ Application Development - Virtualization ]__\\    //¯¯\ \\ " ,
        " \\ \__//    \\      *     *     *     *     *      ]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //   *     *     *     *     *     *   ]________________________________________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\      *     *     *     *     *      ]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //   *     *     *     *     *     *   ]_______[ Network & Hardware Magistration ]______\\    //¯¯\ \\ " ,
        " \\ \__//    \\     What America Once Stood For     ]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //_____________________________________]________________________________________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //_________________________________[=]\_/[=]\_/[=]\_/[=]________________________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //_________________________________[=]  H Y B R I D  [=]________________________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //__________________[=]\_/[=]\_/[=]|=|      B Y      |=|[=]\_/[=]\_/[=]_________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯| |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //__________________[-] S E C U R E - D I G I T S - P L U S - L L C [-]_________________\\    //¯¯\ \\ " ,
        " \\ \__//    \\¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯/¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //___________[=]\_/[=]\_/[=]\_/[=]\_/[=]\__/[=]\__/[=]\_/[=]\_/[=]\_/[=]\_/[=]__________\\    //¯¯\ \\ " ,
        " \\ \__//    \\¯¯¯¯¯¯¯¯¯¯¯[=]¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯[=]¯¯¯¯¯¯¯¯¯¯//    \\__/ // " ,
        " // /¯¯\\    //___________[=]  0 9 / 0 2 / 2 0 1 9  |  M I C H A E L  C  C O O K  S R   [=]__________\\    //¯¯\ \\ " ,
        " \\ \__//    ¯¯¯¯¯¯¯¯¯¯¯¯¯[=]                                                           [=]¯¯¯¯¯¯¯¯¯¯¯¯    \\__/ // " ,
        " // /¯¯\\                 [=]___________ [ A Heightened Sense Of Security ] ____________[=]                //¯¯\ \\ " ,
        " \\ \__//   ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____   \\__/ // " ,
        " // /¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__/ // " ,
        "  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  " | % { 
        Write-Host $_ -F 10 -B 0 } ; Sleep -S 2  
    }

# ____                                                                                                                    ____________________________
#//¯¯\\__________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Display-Foot                                                                                                 #¯¯\\__//¯¯\\__//__\\__//¯¯\\
    {                                                                                                                        #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        "  ________________________________________________________________________________________________________________  " ,
        " // /¯¯\\__//¯¯\\__//¯¯\\    __________________________________________________________    //¯¯\\__//¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//¯¯\\__//    Secure Digits Plus LLC | Hybrid | Desired State Controller    \\__//¯¯\\__//¯¯\\__/ // " ,
        " // /¯¯\\__//¯¯\\__//¯¯¯     ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯     ¯¯¯\\__//¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//¯¯¯ -=-=-=-=-=-=-=[ Dynamically Engineered Digital Security ]-=-=-=-=-=-=--=-= ¯¯¯\\__//¯¯\\__/ // " ,
        " // /¯¯\\__//¯¯\\    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯                                           ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    //¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//   Application Development | Virtualization | Network and Hardware Magistration   \\__//¯¯\\__/ // " ,
        " // /¯¯\\__//¯¯\\   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯   //¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//   https://www.securedigitsplus.com | Server-Client | Seedling-Spawning Script    \\__//¯¯\\__/ // " ,
        " // /¯¯\\__//¯¯\\___¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ___//¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//¯¯\\___        You've just deployed a heightened sense of security         ___//¯¯\\__//¯¯\\__/ // " ,
        " // /¯¯\\__//¯¯\\__//¯¯\\___    ____    ____    ____    ____    ____    ____    ____    ___//¯¯\\__//¯¯\\__//¯¯\ \\ " ,
        " \\ \__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__/ // " ,
        "  ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯  " | % { 
        Write-Host $_ -F Green -B Black } ; Sleep -S 2 
    }
# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Convert-XAMLToWindow                                                #¯¯¯\\__//¯¯\\__//__\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                 #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ 
        Param ( [ Parameter ( Mandatory ) ] [ String ] $XAML , [ String [] ] $NE = $Null , [ Switch ] $PassThru ) 

        @( "Framework" , "Core" | % { "Presentation$_" } ) + "WindowsBase" | % { Add-Type -AssemblyName $_ } 
 
        $NR = [ XML.XMLReader ]::Create( [ IO.StringReader ] $XAML ) ; $OP = [ Windows.Markup.XAMLReader ]::Load( $NR ) 
        
        $NE | % { $OP | Add-Member -MemberType NoteProperty -Name $_ -Value $OP.FindName( $_ ) -Force } 
 
        If ( $PassThru ) { $OP } Else { $Null = $GUI.Dispatcher.InvokeAsync{ $OP = $GUI.ShowDialog() ; SV -Name OP -Value $OP -Scope 1 }.Wait() ; $OP } 
    } 
# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Show-WPFWindow                                                      #¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        Param ( [ Parameter ( Mandatory ) ] [ Windows.Window ] $GUI ) 
        $OP = $Null ; $Null = $GUI.Dispatcher.InvokeAsync{ $OP = $GUI.ShowDialog() ; SV -Name OP -Value $OP -Scope 1 }.Wait() ; $OP 
    }

# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Get-Domain                                                          #¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        $CS = GCIM Win32_ComputerSystem 
        $CS | ? { $_.PartOfDomain -eq $True } | % { IPMO ActiveDirectory } 
        If ( $CS.Domain -ne $Null ) { Return $CS.Domain }
    }

# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Collect-NetBIOS                                                     #¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        $NBTStat  = @( NBTSTAT -n )
        $Items = @( )

        ForEach ( $I in ( 0..( $NBTStat.Count - 1 ) ) ) 
        {
            $X = $NBTStat[$I]
            
            If ( $X -like "*Registered*" ) { $Items += $i }
        }
        
        $Y = $Items.Count 

        If ( $Y -gt 1 ) 
        {
            $NBT = @( 0..( $Y - 1 ) )

            ForEach ( $i in ( 0..( $Y - 1 ) ) )
            {
                $z = $Items[$i]
                $X = $NBTStat[$z]

                $List = @{  0 = $X[ 4..18] | ? { $_ -ne " " }
                            1 = $X[19..22] | ? { $_ -ne " " }
                            2 = $x[25..36] | ? { $_ -ne " " }
                            3 = $x[37..49] | ? { $_ -ne " " } }

                $Item = ForEach ( $j in 0..3 ) { $List[$j] -join '' }

                $NBT[$I] = [ PSCustomObject ]@{ Name = $Item[0] ; ID = $Item[1] ; Type = $Item[2] ; Status = $Item[3] }
            }
        }

        Else 
        { 
                $List = @{  0 = $X[ 4..18] | ? { $_ -ne " " }
                            1 = $X[19..22] | ? { $_ -ne " " }
                            2 = $x[25..36] | ? { $_ -ne " " }
                            3 = $x[37..49] | ? { $_ -ne " " } }

                $Item = ForEach ( $j in 0..3 ) { $List[$j] -join '' }

                $NBT  = [ PSCustomObject ]@{ Name = $Item[0] ; ID = $Item[1] ; Type = $Item[2] ; Status = $Item[3] }
        }

        Return $NBT
    }

# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Get-NetBIOS                                                         #¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        Return ( Collect-NetBIOS | ? { $_.ID -like "*1C*" } ).Name
    }

# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Get-DCName                                                          #¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        Return ( Collect-NetBIOS | ? { $_.ID -like "*20*" } ).Name
    }

# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//
    Function Split-Username # Splits the NetBIOS / Domain from Username Entry     ¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding() ] Param (
            [ Parameter ( Mandatory = $True ) ] [ String ] $User )

        $X = $User.ToCharArray() ; If ( $X -contains "/" ) { $X = $X.Replace( "/" , "\" ) }

        If ( $X -contains "\" ) { $Y , $Z = "\" , 0 } If ( $X -Contains "@" ) { $Y , $Z = "@" , 1 } ; $0 , $1 = 0..1 | % { @( ) } ; $S = 0
        ForEach ( $I in ( 0..( $X.Count - 1 ) ) ) 
        {
            $C = $X[$I] ; If ( $C -ne $Y ) { If ( $S -eq 0 ) { $0 += $C } If ( $S -eq 1 ) { $1 += $C } } If ( $C -eq $Y ) { $S = 1 }
        }
        If ( $Z -eq 0 ) { Return @{ NetBIOS = $0 ; User = $1 } } If ( $Z -eq 1 ) { Return @{ User = $0 ; Domain = $1 } }
    }

# ____                                                                            ____________________________________________________________________ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Auth-Cred # Tests credential for AD/WG Authentication               #¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    {                                                                                #¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        [ CmdLetBinding () ][ OutputType ( [ Int ] ) ] Param ( 
        
            [ Parameter ( ValueFromPipeLine = $True , ValueFromPipelineByPropertyName = $True ) ]
                [ Alias ( 'PSCredential' ) ] [ ValidateNotNull () ][ PSCredential ][ Credential () ] $Creds )

        Try   { $DC  = @( Get-DCName | ? { $_ -ne $Null } )
                $Dom = @( Get-Domain | ? { $_ -ne $Null } )
                $AD  = "LDAP://$( $DC ):389/DC=$( $Dom.Split('.') -join ',DC=' )"
                $DX  = [ DirectoryEntry ]::New( "$AD" , "$( $Creds.Username )" , "$( $Creds.GetNetworkCredential().Password )" ) }

        Catch { $_.Exception.Message ; Continue } 

        If ( ! $DX ) { Return 0 } ElseIf ( $DX.Name -ne $Null ) { Return 1 } Else { Return 0 }
    }

# ____                                                                                                                        _________________________
#//¯¯\\______________________________________________________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\
    Function Enter-ServiceAccount  # Pulls up a script login prompt                                                      \\__//¯¯\\__//¯¯\\__//  \\__//
    {   
        $GridC = 25 , 75 , 34 , 75 , 25 | % { 
                        "<ColumnDefinition Width='$_*' />"
        }
        
        $GridR = "" , "" + @( 0..3 | % { "1.5" } ) | % { 
                        "<RowDefinition Height = '$_*' />"
        }

        $XAML = @"
        <Window                      xmlns =                 "http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                                   xmlns:x =                              "http://schemas.microsoft.com/winfx/2006/xaml" 
                                     Title =             "Secure Digits Plus LLC | Hybrid @ Service Account Designation" 
                                     Width =                                                                       "480" 
                                    Height =                                                                       "300" 
                       HorizontalAlignment =                                                                    "Center" 
                                ResizeMode =                                                                  "NoResize" 
                     WindowStartupLocation =                                                              "CenterScreen" 
                                   Topmost =                                                                      "True" >
            <GroupBox 
                                    Header =                                               "Enter Username and Password" 
                       HorizontalAlignment =                                                                    "Center" 
                         VerticalAlignment =                                                                    "Center" 
                                    Height =                                                                       "250" 
                                    Margin =                                                               "10,10,10,10" 
                                     Width =                                                                       "460" >
                <Grid 
                                    Height =                                                                       "200" >
                    <Grid.ColumnDefinitions>
                        $( $GridC )
                    </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                        $( $GridR )
                </Grid.RowDefinitions>
            <TextBlock Grid.ColumnSpan="3" Grid.Row="0" FontSize="12" HorizontalAlignment="Center" Width="350" Grid.Column="1">Enter the credentials you would like to designate to your user.</TextBlock>
            <TextBlock Grid.ColumnSpan="3" Grid.Row="1" FontSize="12" HorizontalAlignment="Center" Width="350" Grid.Column="1">A password is required, but may be changed after logging in.</TextBlock>
            <TextBlock Grid.Row="2" FontSize="12" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,25,0" Height="20" Width="120" TextAlignment="Right" Grid.Column="1">Username:</TextBlock>
            <TextBlock Grid.Row="3" FontSize="12" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,25,0" Height="20" Width="120" TextAlignment="Right" Grid.Column="1">Password:</TextBlock>
            <TextBlock Grid.Row="4" FontSize="12" HorizontalAlignment="Right" VerticalAlignment="Center" Height="20" Width="120" Text="Confirm:" Margin="0,0,25,0" Grid.Column="1" TextAlignment="Right"/>
            <TextBox Name="Username" Grid.Row="2" Grid.Column="2" Height="24" Width="180" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="40,0,0,0" Grid.ColumnSpan="3"></TextBox>
            <PasswordBox Name="Password" PasswordChar="*" Grid.Row="3" Grid.Column="2" Height="24" Width="180" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="40,0,0,0" Grid.ColumnSpan="3"></PasswordBox>
            <PasswordBox Name="Confirm" PasswordChar="*" Grid.Row="4" Grid.Column="2" Height="24" Width="180" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="40,0,0,0" Grid.ColumnSpan="3"></PasswordBox>
            <Button Grid.Row="5" Grid.Column="1" Name="Ok" Content="OK" Width="140" HorizontalAlignment="Right" Margin="0,15,0,0"/>
            <Button Grid.Row="5" Grid.Column="3" Name="Cancel" Content="Cancel" Width="140" HorizontalAlignment="Center" Margin="0,15,0,0"/>
        </Grid>
    </GroupBox>
</Window>
"@

        $GUI = Convert-XAMLtoWindow -Xaml $xaml -NE 'Username', 'Password', 'Confirm', 'Ok', 'Cancel' -PassThru

        $GUI.Cancel.add_Click( { $GUI.DialogResult = $False } )

        $GUI.Ok.add_Click( 
        {
            $0      = "Username" , "Password" , "Confirmation" ; $1 = $0 | % { "You must enter a $_" } ; $2 = $0 | % { "$_ Error" }
            $1[2]   = $1[2].Replace( "You must enter a" , "Password Must Match the" )
            $1     += "The provided account is either incorrect or invalid. Try again, or hit cancel to exit" ; $2 += "Authentication Failure"
            $MSG    = 0..3 | % { "[ System.Windows.MessageBox ]::Show( '$( $1[$_] )' , '$( $2[$_] )' )" }

            If ( $GUI.Username.Text -ne $Null )
            { Echo $GUI.Username.Text }

            If     ( $GUI.Username.Text -eq $Null )                                                                                   { IEX $MSG[0] }
            ElseIf ( $GUI.Password.Password -eq $Null )                                                                               { IEX $MSG[1] }
            ElseIf ( ( $GUI.Password.Password -notmatch $GUI.Confirm.Password ) -or ( $GUI.Confirm.Password -eq $Null ) )             { IEX $MSG[2] }
            ElseIf ( [ PSCredential ]::New( $GUI.Username.Text , $GUI.Password.SecurePassword ) | Auth-Cred | % { $_ -ne 1 } )        { IEX $MSG[3] }
            Else 
            { $GUI.DialogResult = $True }

            })

            $Null = $GUI.Username.Focus()

            $OP = Show-WPFWindow -GUI $GUI

            If ( $OP -eq $True ) 
            {
                Return [ PSCredential ]::New( $GUI.Username.Text , $GUI.Password.SecurePassword )
            }

            Else { Return Wrap-Action "Either the user cancelled, or the dialogue failed" }
    }

    Display-TrueColors

    $DCCred = @( Enter-ServiceAccount ) 
    
    If ( $DCCred.UserName -ne $Null ) { Wrap-Action "[+] Authenticated" "$( $DCCred.Username )" } 
    Else { Wrap-Action "[!] Exception" "An account could not be authenticated, or the user exited" }
