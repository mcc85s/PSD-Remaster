# ____                                                                            ____    ____    ____    ____    ____    ____    ____    ____    ____ 
#//¯¯\\__________________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
#\\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    Function Provision-DomainController                                          #¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯  
    {#¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\_____________________________________________//¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯      

        $Schema    = "http://schemas.microsoft.com/winfx/2006/xaml"
        $Author    = "Secure Digits Plus LLC"

        $CS        = ( GCIM Win32_OperatingSystem ).Caption
        $B         = $False , $True 

        $Position  = 0..9
        $Position.Add( 0 , "" )
        
        ForEach ( $I in "Top" , "Center" , "Bot" ) { "Left" , "Center" , "Right" | % { "HorizontalAlignment = '$_' VerticalAlignment = '$I'" } }

        $FT     = Collect-FeaturesState -All
        
        $SP     = 0..13 | % { "    " * $_ }

        Function Show-DCPromoGUI
        {

            Param ( [ ValidateSet ( 0 , 1 , 2 , 3 ) ] [ Parameter ( Position = 0 , Mandatory = $True ) ] [ Int ] $Profile = 0 )

            # ____   [-=-=-=-=-=-=-=-=-=-=-]       ____    ____    ____    ____    ____    ____    ____    ____    ____    ____  
            #//¯¯\\__[ Declare Common Vars ]______//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯[=-=-=-=-=-=-=-=-=-=-=]¯¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $P    = $Profile 
                $Out  , $XML = 0..1 | % { [ Ordered ]@{ } }
                $Type = @{ 0 = $Null ; 1 = "TreeDomain" ; 2 = "ChildDomain" ; 3 = $Null }
                
                $Out.Add( "DomainType" , $Type[$P] )

            # ____   [-=-=-=-=]    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____  
            #//¯¯\\__[ Header ]___//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯[=-=-=-=-]¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $X      = @( 2 ; 0..4 | % { 13 } ; 10 , 9 , 13 ) | % { $SP[$_] }
                $Y      = "<Window" , "  xmlns = '$Schema/presentation'" , "xmlns:x = '$Schema'" , "  Title = '$Author | Hybrid - Desired State Controller Installation'" ,
                          "  Width = '800'" , " Height = '800'" , "HorizontalAlignment = 'Center'" , "  WindowStartupLocation = 'CenterScreen'" , "Topmost = 'True' >"
                
                $XML.Add( "00" , @( 0..8 | % { $X[$_] + $Y[$_] } ) )

            # ____   [-=-=-=-=-=-=-=-=]    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____  
            #//¯¯\\__[ Open Main Grid ]___//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯[=-=-=-=-=-=-=-=-]¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $X      = 2 , 3 , 4 , 4 , 3 | % { $SP[$_] }
                $Y      = @( "<Grid>" , "<Grid.RowDefinitions>" ; '20' , '*' | % { "<RowDefinition Height = '$_' />" } ; "</Grid.RowDefinitions>" )

                $XML.Add( "01" , @( 0..4 | % { $X[$_] + $Y[$_] } ) )

            # ____   [-=-=-=-=-=-=-=]      ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____  
            #//¯¯\\__[ Menu Section ]_____//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯[=-=-=-=-=-=-=-]¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $Menu   = 'Forest' , 'Tree' , 'Child' , 'Clone'
                $Action = @( 'Forest¯[_New_Root_]' ; 'Tree' , 'Child' | % { 'Domain¯[_New_$_`_Sub-Domain_]' } ; 'DomainController¯[_Add_DC_]' ) | % { "Install-ADDS$_" }

                $X      = 3 , 4 , 5 , 5 , 5 , 5 , 4 , 3 | % { $SP[$_] }

                $Y      = @("<Menu Grid.Row = '0' Height = '20' >" , "<MenuItem Header = 'New' >" ; 
                          0..3 | % { "<$MenuItem Name = '$( $Menu[$_] )' Header = '$( $Action[$_] )' />"} ; "</MenuItem>" , "</Menu>" )

                $XML.Add( "02" , @( 0..7 | % { $X[$_] + $Y[$_] } ) )

            # ____   [-=-=-=-=-=-=-=-]     ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____  
            #//¯¯\\__[ Body0 Section ]____//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯[=-=-=-=-=-=-=-=]¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $X      = 3 , 12 , 13 , 10 , 10 , 13 , 13 | % { $SP[$_] }
                          
                $Y      = @( "<GroupBox" , "   Grid.Row = '1'" , " Header = '[ Hybrid-DSC Domain Service Configuration ]'" , 
                          "HorizontalAlignment = 'Center'" , "  VerticalAlignment = 'Center'" , "  Width = '760'" , " Height = '740' >" )

                $XML.Add( "03" , @( 0..19 | % { $X[$_] + $Y[$_] } ) )

            # ____   [-=-=-=-=-=-=-]       ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____  
            #//¯¯\\__[   Framing   ]______//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯[=-=-=-=-=-=-=]¯¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $X      = 4 , 5 , 6 , 7 , 7 , 6 , 6 , 7 , 8 , 8 , 7 | % { $SP[$_] }

                $Y      = @( "<Grid>" , "<Grid Grid.Row = '1' Margin = '10' >" , "<Grid.RowDefinitions>" ; @( '' , '10' | % { "<RowDefinition Height = '$_*' />" } ) +
                          "</Grid.RowDefinitions>" , "<Grid Grid.Row = '0' >" , "<Grid.ColumnDefinitions>" ; @( 0..1 | % { "<ColumnDefinition Width = '*' />" } ) +
                          "</Grid.ColumnDefinitions>" )

                $XML.Add( "04" , @( 0..10 | % { $X[$_] + $Y[$_] } ) )

            # ____   [-=-=-=-=-=-=]       ____    ____    ____    ____    ____    ____    ____    ____    ____    ____    ____  
            #//¯¯\\__[ DomainMode ]______//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯[=-=-=-=-=-=-]¯¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $LI , $ED = @( ) , @( "00" , "03" ; @( "08" , 12 | % { $_ , "$_ R2" } ) ; 16 , 19 )
                
                If ( $CS -like "*R2*" ) { $R2 = 1 } Else { $R2 = 0 }

                0..7 | % { 

                    $I = $ED[$_]
                    
                        If ( $CS -like "*$I*" )
                        {
                            $True , $False | % { ( $R2[0] -and $R2[1] -eq $_ ) -eq $True } | % { $J = 'True' }
                        }
                        $LI += "<ComboBoxItem Content = 'Server 20$I' IsSelected = '$J' />"
                 }
                
                
                

                0..1 | % { 

                    $Y  = @( "Forest" , "Domain" )[$_] 
                    $X  = @( 7 , 8 ; @( 0..7 | % { 9 } ) ; 8 , 7 ) | % { $SP[$_] }
                    $Y  = @( "<GroupBox Header = '$Y Mode' Grid.Column = '$_' Margin = '5' >" , "<ComboBox Name = '$Y`Mode' Height = '24' SelectedIndex = '0' >" ; 
                          @( $LI ) ; "</ComboBox>" , "</GroupBox>" ) ; 
                    $Z  = 0..11 | % { $X[$_] + $Y[$_] }
                    
                    If ( $_ -eq 0 ) { $Forest = $Z } Else { $Domain = $Z } 
                }
    
                $Parent = "Parent" | % { 
                
                    $X  = @( 6 , 7 , 6 ) | % { $SP[$_] }
                    $Y  = @( "<GroupBox Header = '$_ Domain' Grid.Column = '0' Margin = '5' >" , 
                          "<TextBox Name = '$_`DomainName' Text = '&lt;Enter Domain Name&gt;' Height = '20' Margin = '5' />" , "</GroupBox>" )
                    Return 0..2 | % { $X[$_] + $Y[$_] } 
                }
    
                $Neither = $SP[24] + "<GroupBox Header = 'Clone Domain Controller' Margin = '5' Grid.ColumnSpan = '2' />"

                $Top = @{ 0 = @( $Forest ; $Domain ) ; 1 = @( $Parent ; $Domain ) ; 2 = @( $Parent ; $Domain ) ; 3 = ( $Neither ) }

                @( "Forest" , "Domain" | % { "$_`Mode" } ; "ParentDomain" ) | % { $Out.Add( $_ , "" ) }

                $XML.Add( "05" , @( $Top[$P] ) )

            # ________________________________________________________________________________________________________________  
            #//¯¯\\__[ Frame[1] ]________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 
                        
                $X  = @( 6 , 6 , 7 , 8 , 8 , 7 , 7 , 8 , 8 , 7 ) | % { $SP[$_] }

                $Y  = @( "</Grid>" , "<Grid Grid.Row = '1' >" , "<Grid.ColumnDefinitions>" ; @( '' , '2.5' | % { "<ColumnDefinition Width = '$_*' />" } ) +
                         "</Grid.ColumnDefinitions>" , "<Grid.RowDefinitions>" ; @( '3' , '' | % { "<RowDefinition Height = '$_*' />" } ) + "</Grid.RowDefinitions>" )

                $XML.Add( "Frame1" , @( 0..9 | % { $X[$_] + $Y[$_] } ) )

            # ________________________________________________________________________________________________________________  
            #//¯¯\\__[ Services Selection ]______//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $SVC , $Y , $Z = @( ) , ( "[X]" , "[_]" ) , ( "IsEnabled = 'False' IsChecked = 'True'" , "IsEnabled = 'True'" )
                ForEach ( $I in 0..( $FT.Count - 1 ) )
                {
                    $X   = $FT[$I].Split( ' ' )
                    $ID  = $X[0] | % { $_.Replace('-','_') , $_ }
                    $ST  = 0..1 | ? { $X[1] -like "*$( $Y[$_] )*" } | % { $B[$_] , $Z[$_] }

                    $Out.Add( $ID[0] , $ST[0] ) 

                    "<TextBlock Grid.Column = '0' Grid.Row = '$I' Margin = '5' TextAlignment = 'Right' >$( $ID[1] ):</TextBlock>" ,
                    "<CheckBox  Grid.Column = '1' Grid.Row = '$I' Margin = '5' Name = '$( $ID[0] )' $( $ST[1] ) />" | % { $SVC += $_ }
                }

                $X = @( 6 , 7 , 8 , 9 , 9 , 8 , 8 ; 0..16 | % { 9 } ; 0..34 | % { 8 } ; 7 , 6 ) | % { $SP[$_] }

                $Y = @( "<GroupBox Header = 'Service Options' Grid.Row = '0' Grid.Column = '0' Margin = '5' >" , "<Grid Grid.Row = '0' Grid.Column = '0' >" , 
                "<Grid.ColumnDefinitions>" ; '5' , '' | % { "<ColumnDefinition Width = '$_*' />" } ; "</Grid.ColumnDefinitions>" , "<Grid.RowDefinitions>" ; 
                0..16 | % { "<RowDefinition Height =  '*' />" } ; "</Grid.RowDefinitions>" ; @( $SVC ) ; "</Grid>" , "</GroupBox>" )


                $XML.Add( "Services" , @( 0..60 | % { $X[$_] + $Y[$_] } ) )
                $GroupBox1 = "$( $SP[9] )$_" }

            # ________________________________________________________________________________________________________________  
            #//¯¯\\__[ Paths Section ]___//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
            #¯    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯ 

                $Paths = ( 'Database' , 0 ) , ( 'Sysvol' , 1 ) , ( 'Log' , 2 ) | % { 
                "$( $SP[7] )<Label   Grid.Row = '$( $_[1] )' Grid.Column = '0' HorizontalAlignment = 'Right' VerticalAlignment = 'Center' Content = '$( $_[0] )' />" , 
                "$( $SP[7] )<TextBox Grid.Row = '$( $_[1] )' Grid.Column = '1' Height = '20' Margin = '5'    Name = '$( $_[0] )Path' />" }





                $Frame1 = "$( $SP[5] )</Grid>
                    <Grid Grid.Row = '1' >
                        <Grid.ColumnDefinitions>$(       '' , '2.5' | % { "`n$( $SP[7] )<ColumnDefinition Width = '$_*' />" } )`n$( $SP[6] )</Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>$(         '3' ,    '' | % { "`n$( $SP[7] )<RowDefinition   Height = '$_*' />" } )`n$( $SP[6] )</Grid.RowDefinitions>
                        <GroupBox Header = 'Service Options' Grid.Row = '0' Grid.Column = '0' Margin = '5' >
                            <Grid Grid.Row = '0' Grid.Column = '0' >
                                <Grid.ColumnDefinitions>$( '5' , '' | % { "`n$( $SP[9] )<ColumnDefinition Width = '$_*' />" } )`n$( $SP[8] )</Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>$(       0..16 | % { "`n$( $SP[9] )<RowDefinition   Height =   '*' />" } )`n$( $SP[8] )</Grid.RowDefinitions>"
                $GroupBox1

                $Frame2 = "$( $SP[7] )</Grid>
                        </GroupBox>
                    <Grid Grid.Row = '0' Grid.Column = '1' >
                        <Grid.RowDefinitions>$(         '1.5' , '2' | % { "`n$( $SP[7] )<RowDefinition   Height = '$_*' />" } )`n$( $SP[6] )</Grid.RowDefinitions>
                        <GroupBox Grid.Row = '0' Header = 'Paths' Margin = '10' >
                            <Grid>
                                <Grid.ColumnDefinitions>$( '' , '5' | % { "`n$( $SP[9] )<ColumnDefinition Width =   '*' />" } )`n$( $SP[8] )</Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>$(        0..2 | % { "
                                    <RowDefinition Height = '*' />" } )
                                </Grid.RowDefinitions>"
                Return $Paths

                $Xaml = $Header , $Frame0 , $Top[$P] , $Frame1 , $SVC , $Frame2 , $Paths

    #  ____                                                                        ____    ____    ____    ____    ____  
    # //¯¯\\______________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    # \\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    #  ¯¯¯\\__[ ForestMode / DomainMode / ParentDomainName ]______________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯  

        $NamedElements = @( $Names ; 'Type' , 'Mode' | % { "Domain$_" } ; 'ForestMode' , 'ParentDomainName' , 'InstallDns' , 
        'CriticalReplicationOnly' , 'NoGlobalCatalog' , 'CreateDnsDelegation' ; @( "Domain" | % { $_ , "New$_" } | % { $_ , "$_`NetBIOS" } ; 
        "Site" ) | % { "$_`Name" } ; 'ReplicationSourceDC' , 'Credential' )

        $NE = $NamedElements

        ForEach ( $I in 0..( $NE.Count - 1 ) )
        {     
            If ( $NE[$I] -like "*CB_*" ) 
            {
                0..1 | ? { $Features[$I] -like "*$( $Status[$_] )*" } | % { $Out.Add( $Features[$I].Split(' ')[0].Replace('-','_') , $Value[$_] ) }
            }
            $Out.Add( $NE[$I] , "" )
        }

    $Out | % {

        ForEach ( $i in 0..16 )
        {
            If ( ( Collect-FeaturesState -All )[$I] -like "*$_*"


    $GUI = Convert-XAMLtoWindow -Xaml $Xaml -NE $NamedElements -PassThru
    


    Function ProcessSelection
    {
        If ( $GUI.Process.SelectedIndex -eq 0 )
        { 
            $Process              = 0 
            "DomainName" ,
            "DomainNetBIOSName" ,
            "SiteName"
                $GUI.Branch.IsEnabled = $False
                $Out.DomainType       = ""
            }

            If ( $GUI.Process.SelectedIndex -eq 1 )
            { 
                $Process              = 1
                $GUI.Branch.IsEnabled = $True
                $Out.DomainType       = "TreeDomain"
            }

            If ( $GUI.Process.SelectedIndex -eq 2 )
            { 
                $Process              = 2
                $GUI.Branch.IsEnabled = $True
                $Out.DomainType       = "ChildDomain"
            }

            If ( $GUI.Process.SelectedIndex -eq 3 )
            { 
                $Process              = 3
                $GUI.Branch.IsEnabled = $False
                $Out.DomainType       = ""
            }
            
            If ( $GUI.Process.SelectedIndex -eq 4 )
            { 
                $Process              = 4
                $GUI.Branch.IsEnabled = $False
                $Out.DomainType       = ""
            }
        }

        $GUI.CB_0         | % { $_.Add_Checked( { $Out.CB_0  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_0  = 0 } ) }
        $GUI.CB_1         | % { $_.Add_Checked( { $Out.CB_1  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_1  = 0 } ) }
        $GUI.CB_2         | % { $_.Add_Checked( { $Out.CB_2  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_2  = 0 } ) }
        $GUI.CB_3         | % { $_.Add_Checked( { $Out.CB_3  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_3  = 0 } ) }
        $GUI.CB_4         | % { $_.Add_Checked( { $Out.CB_4  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_4  = 0 } ) }
        $GUI.CB_5         | % { $_.Add_Checked( { $Out.CB_5  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_5  = 0 } ) }
        $GUI.CB_6         | % { $_.Add_Checked( { $Out.CB_6  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_6  = 0 } ) }
        $GUI.CB_7         | % { $_.Add_Checked( { $Out.CB_7  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_7  = 0 } ) }
        $GUI.CB_8         | % { $_.Add_Checked( { $Out.CB_8  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_8  = 0 } ) }
        $GUI.CB_9         | % { $_.Add_Checked( { $Out.CB_9  = 1 } ) ; $_.Add_UnChecked( { $Out.CB_9  = 0 } ) }
        $GUI.CB_10        | % { $_.Add_Checked( { $Out.CB_10 = 1 } ) ; $_.Add_UnChecked( { $Out.CB_10 = 0 } ) }
        $GUI.CB_11        | % { $_.Add_Checked( { $Out.CB_11 = 1 } ) ; $_.Add_UnChecked( { $Out.CB_11 = 0 } ) }
        $GUI.CB_12        | % { $_.Add_Checked( { $Out.CB_12 = 1 } ) ; $_.Add_UnChecked( { $Out.CB_12 = 0 } ) }
        $GUI.CB_13        | % { $_.Add_Checked( { $Out.CB_13 = 1 } ) ; $_.Add_UnChecked( { $Out.CB_13 = 0 } ) }
        $GUI.CB_14        | % { $_.Add_Checked( { $Out.CB_14 = 1 } ) ; $_.Add_UnChecked( { $Out.CB_14 = 0 } ) }
        $GUI.CB_15        | % { $_.Add_Checked( { $Out.CB_15 = 1 } ) ; $_.Add_UnChecked( { $Out.CB_15 = 0 } ) }
        $GUI.CB_16        | % { $_.Add_Checked( { $Out.CB_16 = 1 } ) ; $_.Add_UnChecked( { $Out.CB_16 = 0 } ) }

        $GUI.Install_DNS  | % { $_.Add_Checked( { $Out.InstallDns              = $True  } ) ; $_.Add_UnChecked( { $Out.InstallDns              = $False } ) }
        $GUI.Delegate_DNS | % { $_.Add_Checked( { $Out.CreateDnsDelegation     = $True  } ) ; $_.Add_UnChecked( { $Out.CreateDnsDelegation     = $False } ) }
        $GUI.Install_GC   | % { $_.Add_Checked( { $Out.NoGlobalCatalog         = $False } ) ; $_.Add_UnChecked( { $Out.NoGlobalCatalog         = $True  } ) }
        $GUI.Install_CR   | % { $_.Add_Checked( { $Out.CriticalReplicationOnly = $True  } ) ; $_.Add_UnChecked( { $Out.CriticalReplicationOnly = $False } ) }
        $GUI.Install_RODC | % { $_.Add_Checked( { $Out.CriticalReplicationOnly = $True  } ) ; $_.Add_UnChecked( { $Out.CriticalReplicationOnly = $False } ) }

    #  ____                                                                        ____    ____    ____    ____    ____  
    # //¯¯\\______________________________________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\ 
    # \\__//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__// 
    #  ¯¯¯\\__[ Controls/Functions ]______________________________________________//¯¯\\__//¯¯\\__//¯¯\\__//¯¯\\__//¯¯¯  
    #      ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯    ¯¯¯¯       

        $GUI.Process.Add_SelectionChanged({ ProcessSelection })

        $GUI.DCEntry.Add_Click({
            
            If ( $Report -ne $Null ) 
            { 
                $Report | % { 
                    
                    $ServiceAccount = @{ DC = $_.NetBIOS.Host ; Domain = $_.DNS ; NetBIOS = $_.NetBIOS.Name } 
                } 
            }

            Else
            { 
                $ServiceAccount = @{ DC = $DC ; Domain = $Domain ; NetBIOS = $NetBIOS } 
            }

            $DCCred             = @( Enter-ServiceAccount @ServiceAccount )
            $GUI.DCAdmin.Text   = $DCCred.Username
        
        })

        $GUI.Cancel.Add_Click( { $GUI.DialogResult = $False } )

        $GUI.Ok.Add_Click({
                
                If ( $Process -eq 0 )
                {
                    DomainName
                    DomainNetBIOSName
                    SiteName

                }

                If ( $Process -eq 1 )
                { 
                    If ( $GUI.Branch.Text -like "*$Domain*" )
                    {
                        [ System.Windows.MessageBox ]::Show( "Entry is too similar to main domain" , "Similar Domain Name Error" )
                    }

                    If ( $GUI.Branch.Text -like "*$NetBIOS*" )
                    {
                        [ System.Windows.MessageBox ]::Show( "Entry is too similar to main domain" , "Similar NetBIOS Name Error" )

                    }

                    Else
                    {
                        #$Out.DomainType          = "TreeDomain"
                        "DomainType"              = "TreeDomain"
                        "NewDomainName"           = "sideways.com"
                        "NewDomainNetBIOS"        = "SIDEWAYS"
                        "SiteName"		          = "Default-First-Site-Name"
                        $Out.DomainName           = ""
                        $Out.DomainNetBIOSName    = $GUI.NetBIOS
                        $Out.NewDomainName        = $GUI.Branch
                        $Out.NewDomainNetBIOSName = ""
                        $Out.ParentDomainName     = $GUI.Domain
                    }
                }

                If ( $Process -eq 2 )
                {
                    If ( $GUI.Branch.Text -like "" )
                    {
                        
                    }
                }

            ElseIf ( $GUI.DSRM_PW.Password -eq       $Null )                 { IEX $MSG[1] }
            ElseIf ( $GUI.DSRM_CF.Password -eq       $Null )                 { IEX $MSG[2] }
            ElseIf ( $GUI.DSRM_PW.Password -eq       $Null )                 { IEX $MSG[1] }
            ElseIf ( $GUI.DSRM_CF.Password -eq       $Null )                 { IEX $MSG[2] }
            ElseIf ( $GUI.DSRM_PW.Password -notmatch $GUI.DSRM_CF.Password ) { IEX $MSG[2] }
            Else { $GUI.DialogResult = $True }
        })


        $GUI.Process.SelectedIndex = 0 ; $Process                   = 0 ; $GUI.Branch.IsEnabled      = $False

        $GUI.DCAdmin  | % { $_.Text = $( If ( $DCCred.UserName -ne $Null ) { $DCCred.UserName } Else { "" } ) }
        $GUI.Database | % { $_.Text = "C:\Windows\NTDS"   }
        $GUI.Sysvol   | % { $_.Text = "C:\Windows\SYSVOL" }
        $GUI.Log      | % { $_.Text = "C:\Windows\SYSVOL" }
        $GUI.SiteName | % { $_.Text = $( If ( $Sitelink ) { $Sitelink } Else { "Default-First-Site-Name" } ) }
        $GUI.Domain   | % { $_.Text = $( If ( $Domain   ) { $Domain   } Else {   "Enter new Domain Name" } ) }
        $GUI.NetBIOS  | % { $_.Text = $( If ( $NetBIOS  ) { $NetBIOS  } Else {  "Enter new NetBIOS Name" } ) }

        $Null = $GUI.DSRM_PW.Focus()

        $OP   = Show-WPFWindow -GUI $GUI


        If ( $OP -eq $True )
        {
             Echo $Combo

             $Out.SafeModeAdministratorPassword  = $GUI.DSRM_PW.SecurePassword
             $Out.ForestMode                     = $GUI.ForestMode.SelectedIndex + 1
             $Out.DomainMode                     = $GUI.DomainMode.SelectedIndex + 1
        If ( $Out.ForestMode -in 7..8 ) {          $Out.ForestMode = 7 }
        If ( $Out.DomainMode -in 7..8 ) {          $Out.DomainMode = 7 }
             $Out.Credential                     = $DCCred
             $Out.DatabasePath                   = $GUI.Database.Text
             $Out.SysvolPath                     = $GUI.Sysvol.Text 
             $Out.LogPath                        = $GUI.Log.Text
             $Out.SiteName                       = $GUI.SiteName.Text
             $Out.DomainName                     = $GUI.Domain.Text
             $Out.DomainNetBIOSName              = $GUI.NetBIOS.Text

             $Out | GM | ? { $_.MemberType -eq "NoteProperty" } | Select Name

             Echo $Out
             Read-Host "Correct?"
        }

        Else { Write-Theme -Action "[!] Exception" "Either the user cancelled, or the dialogue failed" }
        
    }
}
